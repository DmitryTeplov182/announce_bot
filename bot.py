import os
import re
import json
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
)
import logging
import asyncio
import glob
import gpxpy
import gpxpy.gpx
from datetime import datetime, timedelta
from dotenv import load_dotenv
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ASK_DATE_TIME, ASK_KOMOOT_LINK, PROCESS_GPX, ASK_ROUTE_NAME, ASK_START_POINT, ASK_START_LINK, ASK_PACE, ASK_COMMENT, PREVIEW_STEP, SELECT_ROUTE = range(10)

STEP_TO_NAME = {
    ASK_DATE_TIME: '‚úèÔ∏è –ò–∑–º. –¥–∞—Ç—É',
    ASK_KOMOOT_LINK: '‚úèÔ∏è –ò–∑–º. —Å—Å—ã–ª–∫—É Komoot',
    ASK_ROUTE_NAME: '‚úèÔ∏è –ò–∑–º. –Ω–∞–∑–≤–∞–Ω–∏–µ',
    ASK_START_POINT: '‚úèÔ∏è –ò–∑–º. —Å—Ç–∞—Ä—Ç',
    ASK_PACE: '‚úèÔ∏è –ò–∑–º. —Ç–µ–º–ø',
    ASK_COMMENT: '‚úèÔ∏è –ò–∑–º. –∫–æ–º–º–µ–Ω.',
}

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', 'YOUR_TELEGRAM_BOT_TOKEN')

# –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è tour_id –∏–∑ Komoot-—Å—Å—ã–ª–∫–∏
KOMOOT_LINK_PATTERN = re.compile(r'(https?://)?(www\.)?komoot\.[^/]+/tour/(\d+)')
CACHE_DIR = 'cache'
os.makedirs(CACHE_DIR, exist_ok=True)

def load_start_points():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open('start_points.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            start_points = data.get('start_points', [])
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º "–°–≤–æ—é —Ç–æ—á–∫—É" –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
            start_points.append({
                'name': '–°–≤–æ—è —Ç–æ—á–∫–∞',
                'link': None
            })
            
            return start_points
            
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª start_points.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        default_points = [
            {'name': 'koferajd', 'link': 'https://maps.app.goo.gl/iTBcRqjvhJ9DYvRK7'},
            {'name': '–§–ª–∞–≥–∏', 'link': 'https://maps.app.goo.gl/j95ME2cuzX8k9hnj7'},
            {'name': '–õ–∏–¥–ª –õ–∏–º–∞–Ω', 'link': 'https://maps.app.goo.gl/5JKtAgGBVe48jM9r7'},
            {'name': '–ñ–µ–ª–µ–∑–Ω–∏—á–∫–∞ –ü–∞—Ä–∫', 'link': 'https://maps.app.goo.gl/hSZ9C4Xue5RVpMea8'},
            {'name': '–ú–∞–∫—Å–∏ —É –ë—É–ª—å–≤–∞—Ä–∞ –ï–≤—Ä–æ–ø—ã', 'link': 'https://maps.app.goo.gl/3ZbDZM9VVRBDDddp8?g_st=ipc'},
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º "–°–≤–æ—é —Ç–æ—á–∫—É" –∏ –∫ —Ç–æ—á–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_points.append({
            'name': '–°–≤–æ—è —Ç–æ—á–∫–∞',
            'link': None
        })
        
        return default_points
        
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ start_points.json: {e}")
        default_points = [
            {'name': 'koferajd', 'link': 'https://maps.app.goo.gl/iTBcRqjvhJ9DYvRK7'},
            {'name': '–§–ª–∞–≥–∏', 'link': 'https://maps.app.goo.gl/j95ME2cuzX8k9hnj7'},
            {'name': '–õ–∏–¥–ª –õ–∏–º–∞–Ω', 'link': 'https://maps.app.goo.gl/5JKtAgGBVe48jM9r7'},
            {'name': '–ñ–µ–ª–µ–∑–Ω–∏—á–∫–∞ –ü–∞—Ä–∫', 'link': 'https://maps.app.goo.gl/hSZ9C4Xue5RVpMea8'},
            {'name': '–ú–∞–∫—Å–∏ —É –ë—É–ª—å–≤–∞—Ä–∞ –ï–≤—Ä–æ–ø—ã', 'link': 'https://maps.app.goo.gl/3ZbDZM9VVRBDDddp8?g_st=ipc'},
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º "–°–≤–æ—é —Ç–æ—á–∫—É" –∏ –∫ —Ç–æ—á–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_points.append({
            'name': '–°–≤–æ—è —Ç–æ—á–∫–∞',
            'link': None
        })
        
        return default_points
        
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ—á–µ–∫ —Å—Ç–∞—Ä—Ç–∞: {e}")
        default_points = [
            {'name': 'koferajd', 'link': 'https://maps.app.goo.gl/iTBcRqjvhJ9DYvRK7'},
            {'name': '–§–ª–∞–≥–∏', 'link': 'https://maps.app.goo.gl/j95ME2cuzX8k9hnj7'},
            {'name': '–õ–∏–¥–ª –õ–∏–º–∞–Ω', 'link': 'https://maps.app.goo.gl/5JKtAgGBVe48jM9r7'},
            {'name': '–ñ–µ–ª–µ–∑–Ω–∏—á–∫–∞ –ü–∞—Ä–∫', 'link': 'https://maps.app.goo.gl/hSZ9C4Xue5RVpMea8'},
            {'name': '–ú–∞–∫—Å–∏ —É –ë—É–ª—å–≤–∞—Ä–∞ –ï–≤—Ä–æ–ø—ã', 'link': 'https://maps.app.goo.gl/3ZbDZM9VVRBDDddp8?g_st=ipc'},
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º "–°–≤–æ—é —Ç–æ—á–∫—É" –∏ –∫ —Ç–æ—á–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_points.append({
            'name': '–°–≤–æ—è —Ç–æ—á–∫–∞',
            'link': None
        })
        
        return default_points

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
START_POINTS = load_start_points()

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞ (–∑–∞–ø–æ–ª–Ω–∏—à—å –ø–æ—Ç–æ–º)
# START_POINTS = [
#     {'name': 'koferajd', 'link': 'https://maps.app.goo.gl/iTBcRqjvhJ9DYvRK7'},
#     {'name': '–§–ª–∞–≥–∏', 'link': 'https://maps.app.goo.gl/j95ME2cuzX8k9hnj7'},
#     {'name': '–õ–∏–¥–ª –õ–∏–º–∞–Ω', 'link': 'https://maps.app.goo.gl/5JKtAgGBVe48jM9r7'},
#     {'name': '–ñ–µ–ª–µ–∑–Ω–∏—á–∫–∞ –ü–∞—Ä–∫', 'link': 'https://maps.app.goo.gl/hSZ9C4Xue5RVpMea8'},
#     {'name': '–°–≤–æ—è —Ç–æ—á–∫–∞', 'link': None},
# ]

PACE_OPTIONS = [
    'üåùüåöüåö',
    'üåùüåóüåö',
    'üåùüåùüåö',
    'üåùüåùüåó',
    'üåùüåùüåù',
]

RU_WEEKDAYS = [
    '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
]

def get_time_of_day(dt: datetime) -> str:
    if dt.hour < 12:
        return '—É—Ç—Ä–æ'
    elif dt.hour < 18:
        return '–¥–µ–Ω—å'
    else:
        return '–≤–µ—á–µ—Ä'

def parse_date_time(date_time_str: str) -> tuple[datetime, str]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (datetime, error_message)
    –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: 19.07 10:00
    """
    try:
        dt = datetime.strptime(date_time_str, '%d.%m %H:%M')
        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
        dt = dt.replace(year=datetime.now().year)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        now = datetime.now()
        if dt < now:
            return None, "‚ùå <b>–£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞!</b> –£–∫–∞–∂–∏ –±—É–¥—É—â—É—é –¥–∞—Ç—É."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º (–±–æ–ª—å—à–µ –≥–æ–¥–∞)
        if dt > now + timedelta(days=365):
            return None, "‚ùå <b>–î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º!</b> –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥–æ–¥–∞."
            
        return dt, None
        
    except ValueError:
        return None, "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b> –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 19.07 10:00)"
    except Exception as e:
        return None, f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã:</b> {str(e)}"

def load_ready_routes():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open('ready_routes.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            routes = data.get('ready_routes', [])
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥–æ—Ç–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(routes)}")
            for i, route in enumerate(routes):
                logger.info(f"–ú–∞—Ä—à—Ä—É—Ç {i+1}: {route['name']} -> {route['start_point']}")
            return routes
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª ready_routes.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ready_routes.json: {e}")
        return []
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–æ—Ç–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤: {e}")
        return []

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
READY_ROUTES = load_ready_routes()

def load_route_comments():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open('routes.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            routes = data.get('routes', [])
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥–æ—Ç–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç—ã: {len(routes)}")
            return routes
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª routes.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ routes.json: {e}")
        return []
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–æ—Ç–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫: {e}")
        return []

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
ROUTE_COMMENTS = load_route_comments()

async def quick_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–æ–Ω—Å–∞ –∏–∑ –≥–æ—Ç–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞"""
    logger.info(f"quick_command –≤—ã–∑–≤–∞–Ω, READY_ROUTES: {len(READY_ROUTES)}")
    
    if not READY_ROUTES:
        logger.warning("READY_ROUTES –ø—É—Å—Ç")
        await update.message.reply_text(
            "‚ùå –ì–æ—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ç–æ–≤—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
    keyboard = []
    for i, route in enumerate(READY_ROUTES):
        keyboard.append([f"{i+1}. {route['name']}"])
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {i+1}. {route['name']}")
    
    keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])
    
    await update.message.reply_text(
        "üö¥‚Äç‚ôÇÔ∏è <b>–í—ã–±–µ—Ä–∏ –≥–æ—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç:</b>\n\n"
        "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –º–∞—Ä—à—Ä—É—Ç, –∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ —Ç–µ–º–ø!",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    context.user_data['quick_mode'] = True
    logger.info("quick_command –∑–∞–≤–µ—Ä—à–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º SELECT_ROUTE")
    return SELECT_ROUTE

async def handle_route_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ç–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞"""
    text = update.message.text.strip()
    logger.info(f"handle_route_selection –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: '{text}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞")
        await update.message.reply_text(
            "‚ùå –í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–Ω–æ–Ω—Å–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞
    if text.startswith(('1.', '2.', '3.', '4.', '5.')):
        try:
            route_index = int(text.split('.')[0]) - 1
            logger.info(f"–í—ã–±—Ä–∞–Ω –º–∞—Ä—à—Ä—É—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º: {route_index}")
            if 0 <= route_index < len(READY_ROUTES):
                route = READY_ROUTES[route_index]
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –º–∞—Ä—à—Ä—É—Ç: {route['name']}")
                context.user_data.update({
                    'komoot_link': route['komoot_link'],
                    'route_name': route['name'],
                    'start_point_name': route['start_point'],
                    'start_point_link': route['start_point_link'],
                    'comment': route['comment'],
                    'quick_mode': True
                })
                
                await update.message.reply_text(
                    f"üö¥‚Äç‚ôÇÔ∏è <b>–í—ã–±—Ä–∞–Ω –≥–æ—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç:</b>\n\n"
                    f"<b>{route['name']}</b>\n"
                    f"üìç –°—Ç–∞—Ä—Ç: {route['start_point']}\n"
                    f"üí¨ {route['comment']}\n\n"
                    f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>26.08 10:00</code>)",
                    parse_mode='HTML',
                    reply_markup=ReplyKeyboardRemove()
                )
                return ASK_DATE_TIME
            else:
                logger.warning(f"–ò–Ω–¥–µ–∫—Å –º–∞—Ä—à—Ä—É—Ç–∞ {route_index} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
            pass
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É
    logger.info("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–Ω–æ–≤–∞")
    keyboard = []
    for i, route in enumerate(READY_ROUTES):
        keyboard.append([f"{i+1}. {route['name']}"])
    keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])
    
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –º–∞—Ä—à—Ä—É—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return SELECT_ROUTE

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –≤ –∫–æ–º–∞–Ω–¥–µ
    command_args = update.message.text.split()
    if len(command_args) > 1 and command_args[1].isdigit():
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
        route_index = int(command_args[1]) - 1
        if 0 <= route_index < len(READY_ROUTES):
            route = READY_ROUTES[route_index]
            context.user_data.update({
                'komoot_link': route['komoot_link'],
                'route_name': route['name'],
                'start_point_name': route['start_point'],
                'start_point_link': route['start_point_link'],
                'comment': route['comment'],
                'quick_mode': True
            })
            await update.message.reply_text(
                f"üö¥‚Äç‚ôÇÔ∏è <b>–í—ã–±—Ä–∞–Ω –≥–æ—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç:</b>\n\n"
                f"<b>{route['name']}</b>\n"
                f"üìç –°—Ç–∞—Ä—Ç: {route['start_point']}\n"
                f"üí¨ {route['comment']}\n\n"
                f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>26.08 10:00</code>)",
                parse_mode='HTML'
            )
            return ASK_DATE_TIME
    
    # –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç
    tomorrow = datetime.now() + timedelta(days=1)
    date_example = tomorrow.strftime('%d.%m')
    
    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–æ–º–∞–Ω–¥—ã
    await update.message.reply_text(
        f'üö¥‚Äç‚ôÇÔ∏è <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–æ–Ω—Å–æ–≤ –≤–µ–ª–æ–ø–æ–µ–∑–¥–æ–∫</b>\n\n'
        f'–°–æ–∑–¥–∞–º –∫—Ä–∞—Å–∏–≤—ã–π –∞–Ω–æ–Ω—Å —Å –º–∞—Ä—à—Ä—É—Ç–æ–º, —Ç–æ—á–∫–æ–π —Å—Ç–∞—Ä—Ç–∞ –∏ –≤—Å–µ–º–∏ –¥–µ—Ç–∞–ª—è–º–∏.\n\n'
        f'<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n'
        f'‚Ä¢ /start - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–æ–Ω—Å\n'
        f'‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n'
        f'‚Ä¢ /restart - —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
        parse_mode='HTML'
    )
    
    # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
    await update.message.reply_text(
        f'<b>–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!</b>\n\n'
        f'–£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>{date_example} 10:00</code>)',
        parse_mode='HTML'
    )
    
    return ASK_DATE_TIME

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = (
        "üö¥‚Äç‚ôÇÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "<b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–æ–Ω—Å:</b>\n"
        "1. –£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú –ß–ß:–ú–ú)\n"
        "2. –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot\n"
        "3. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞\n"
        "4. –í—ã–±–µ—Ä–∏ —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞\n"
        "5. –£–∫–∞–∂–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É–Ω)\n"
        "6. –î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n"
        "7. –ü—Ä–æ–≤–µ—Ä—å –∏ –æ—Ç–ø—Ä–∞–≤—å –∞–Ω–æ–Ω—Å\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–æ–Ω—Å\n"
        "‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ /restart - —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n\n"
        "<b>–¢–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞:</b>\n"
        "‚Ä¢ koferajd, –§–ª–∞–≥–∏, –õ–∏–¥–ª –õ–∏–º–∞–Ω, –ñ–µ–ª–µ–∑–Ω–∏—á–∫–∞ –ü–∞—Ä–∫\n"
        "‚Ä¢ –ò–ª–∏ —É–∫–∞–∂–∏ —Å–≤–æ—é —Ç–æ—á–∫—É\n\n"
        "<b>–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:</b> –î–î.–ú–ú –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 19.07 10:00)"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')

async def ask_date_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ user_data
    date_time_str = update.message.text.strip()
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
    dt, error_msg = parse_date_time(date_time_str)
    if error_msg:
        await update.message.reply_text(error_msg)
        return ASK_DATE_TIME
    
    context.user_data['date_time'] = date_time_str
    context.user_data['parsed_datetime'] = dt  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—É—é –¥–∞—Ç—É
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
    if context.user_data.get('quick_mode'):
        # –í –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ –ø–æ—Å–ª–µ –¥–∞—Ç—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–º–ø
        context.user_data['quick_mode'] = False
        keyboard = [[p] for p in PACE_OPTIONS]
        await update.message.reply_text(
            '‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—ã!\n\n'
            '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É–Ω):',
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_PACE
    
    if context.user_data.get('edit_mode'):
        context.user_data['edit_mode'] = False
        return await preview_step(update, context)
        
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    keyboard = []
    for route in ROUTE_COMMENTS:
        keyboard.append([f"üîó {route['name']}"])
    
    keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])
    
    await update.message.reply_text(
        '‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—ã!\n\n'
        '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ <b>–ø—É–±–ª–∏—á–Ω—É—é</b> —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot\n\n'
        '–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –≥–æ—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç:',
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return ASK_KOMOOT_LINK

async def ask_komoot_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    logger.info(f"ask_komoot_link –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: '{text}'")
    logger.info(f"ROUTE_COMMENTS –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(ROUTE_COMMENTS)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –≥–æ—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞
    if text.startswith("üîó "):
        route_name = text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –≥–æ—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: '{route_name}'")
        # –ò—â–µ–º –º–∞—Ä—à—Ä—É—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        selected_route = None
        for route in ROUTE_COMMENTS:
            if route['name'] == route_name:
                selected_route = route
                break
        
        if selected_route:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É
            text = selected_route['link']
            logger.info(f"–ù–∞–π–¥–µ–Ω –º–∞—Ä—à—Ä—É—Ç: {selected_route['name']} -> {selected_route['link']}")
            await update.message.reply_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω –≥–æ—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç: <b>{selected_route['name']}</b>\n\n"
                f"–°—Å—ã–ª–∫–∞: {selected_route['link']}",
                parse_mode='HTML',
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            logger.warning(f"–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: '{route_name}'")
            await update.message.reply_text(
                "‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ASK_KOMOOT_LINK
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏")
        await update.message.reply_text(
            "‚ùå –í–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–Ω–æ–Ω—Å–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    match = KOMOOT_LINK_PATTERN.search(text)
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∏: {match}")
    
    if not match:
        # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é
        await update.message.reply_text(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot\n\n'
            '–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.'
        )
        return ASK_KOMOOT_LINK
    
    context.user_data['komoot_link'] = text
    context.user_data['tour_id'] = match.group(3)
    if context.user_data.get('edit_mode'):
        context.user_data['edit_mode'] = False
        return await preview_step(update, context)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ GPX
    return await process_gpx(update, context)

async def process_gpx(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tour_id = context.user_data['tour_id']
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ GPX –¥–ª—è tour_id: {tour_id}")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π subprocess
        process = await asyncio.create_subprocess_exec(
            'komootgpx',
            '-d', tour_id,
            '-o', CACHE_DIR,
            '-e',
            '-n',
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å komootgpx –∑–∞–ø—É—â–µ–Ω —Å PID: {process.pid}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            stdout, stderr = await asyncio.wait_for(process.communicate(), timeout=60.0)
            logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å komootgpx –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: {process.returncode}")
        except asyncio.TimeoutError:
            # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–∏—Å, —É–±–∏–≤–∞–µ–º –µ–≥–æ
            logger.warning(f"–ü—Ä–æ—Ü–µ—Å—Å komootgpx –∑–∞–≤–∏—Å, —É–±–∏–≤–∞—é PID: {process.pid}")
            process.kill()
            await update.message.reply_text('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ GPX. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot:')
            return ASK_KOMOOT_LINK
            
        if process.returncode != 0:
            error_msg = stderr.decode() if stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            logger.error(f"–û—à–∏–±–∫–∞ komootgpx: {error_msg}")
            await update.message.reply_text(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ GPX: {error_msg}. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot:')
            return ASK_KOMOOT_LINK
            
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ GPX: {str(e)}", exc_info=True)
        await update.message.reply_text(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ GPX: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot:')
        return ASK_KOMOOT_LINK
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞—á–∞–ª—Å—è
    gpx_files = glob.glob(f"{CACHE_DIR}/*-{tour_id}.gpx")
    if not gpx_files:
        logger.warning(f"GPX —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è tour_id: {tour_id}")
        await update.message.reply_text('GPX-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot:')
        return ASK_KOMOOT_LINK
        
    gpx_path = gpx_files[0]
    logger.info(f"GPX —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {gpx_path}")
    context.user_data['gpx_path'] = gpx_path
    
    try:
        with open(gpx_path, 'r') as f:
            gpx = gpxpy.parse(f)
        length_km = gpx.length_2d() / 1000
        uphill = gpx.get_uphill_downhill()[0]
        context.user_data['length_km'] = round(length_km)
        context.user_data['uphill'] = round(uphill)
        logger.info(f"GPX –æ–±—Ä–∞–±–æ—Ç–∞–Ω: –¥–ª–∏–Ω–∞ {length_km} –∫–º, –Ω–∞–±–æ—Ä {uphill} –º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GPX —Ñ–∞–π–ª–∞: {str(e)}", exc_info=True)
        await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GPX-—Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot:')
        return ASK_KOMOOT_LINK
        
    await update.message.reply_text('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –®–∞–π–∫–∞—à - –ß—É—Ä—É–≥ - –°—Ä–±–æ–±—Ä–∞–Ω - –¢–µ–º–µ—Ä–∏–Ω):')
    return ASK_ROUTE_NAME

async def ask_route_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['route_name'] = update.message.text.strip()
    if context.user_data.get('edit_mode'):
        context.user_data['edit_mode'] = False
        return await preview_step(update, context)
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞
    keyboard = [[p['name']] for p in START_POINTS]
    await update.message.reply_text(
        f"–ú–∞—Ä—à—Ä—É—Ç: {context.user_data['length_km']} –∫–º, –Ω–∞–±–æ—Ä: {context.user_data['uphill']} –º\n\n–í—ã–±–µ—Ä–∏ —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return ASK_START_POINT

async def ask_start_point(update: Update, context: ContextTypes.DEFAULT_TYPE):
    point_name = update.message.text.strip()
    point = next((p for p in START_POINTS if p['name'] == point_name), None)
    if not point:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.')
        return ASK_START_POINT
    if point['name'] == '–°–≤–æ—è —Ç–æ—á–∫–∞':
        context.user_data['start_point_name'] = None
        context.user_data['start_point_link'] = None
        await update.message.reply_text('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞:')
        return ASK_START_LINK
    else:
        context.user_data['start_point_name'] = point['name']
        context.user_data['start_point_link'] = point['link']
        if context.user_data.get('edit_mode'):
            context.user_data['edit_mode'] = False
            return await preview_step(update, context)
        keyboard = [[p] for p in PACE_OPTIONS]
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É–Ω):',
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_PACE

async def ask_start_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∏–º–µ–Ω–∏, –∑–Ω–∞—á–∏—Ç —Å–µ–π—á–∞—Å –∂–¥—ë–º –∏–º—è, –∏–Ω–∞—á–µ –∂–¥—ë–º —Å—Å—ã–ª–∫—É
    if not context.user_data.get('start_point_name'):
        context.user_data['start_point_name'] = update.message.text.strip()
        await update.message.reply_text('–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps –¥–ª—è —Å–≤–æ–µ–π —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞:')
        return ASK_START_LINK
    else:
        link = update.message.text.strip()
        if not (link.startswith('http://') or link.startswith('https://')):
            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http...)')
            return ASK_START_LINK
        context.user_data['start_point_link'] = link
        if context.user_data.get('edit_mode'):
            context.user_data['edit_mode'] = False
            return await preview_step(update, context)
        keyboard = [[p] for p in PACE_OPTIONS]
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É–Ω):',
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_PACE

async def ask_pace(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pace = update.message.text.strip()
    if pace not in PACE_OPTIONS:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–µ–º–ø –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
        return ASK_PACE
    context.user_data['pace'] = pace
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
    if context.user_data.get('quick_mode'):
        # –í –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ –ø–æ—Å–ª–µ —Ç–µ–º–ø–∞ —Å—Ä–∞–∑—É –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
        context.user_data['quick_mode'] = False
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∂–µ –µ—Å—Ç—å –∏–∑ –≥–æ—Ç–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        return await preview_step(update, context)
    
    if context.user_data.get('edit_mode'):
        context.user_data['edit_mode'] = False
        return await preview_step(update, context)
    await update.message.reply_text(
        '–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–Ω–æ–Ω—Å—É (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫):',
        reply_markup=ReplyKeyboardRemove()
    )
    return ASK_COMMENT

async def ask_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text.strip()
    context.user_data['comment'] = comment
    if context.user_data.get('edit_mode'):
        context.user_data['edit_mode'] = False
        return await preview_step(update, context)
    return await preview_step(update, context)

async def preview_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–æ–Ω—Å
    date_time_str = context.user_data.get('date_time', '-')
    dt, error_msg = parse_date_time(date_time_str)
    if dt:
        weekday = RU_WEEKDAYS[dt.weekday()]
        time_of_day = get_time_of_day(dt)
        date_part = dt.strftime('%d.%m')
        time_part = dt.strftime('%H:%M')
    else:
        weekday = '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏?'
        time_of_day = '–≤—Ä–µ–º—è —Å—É—Ç–æ–∫?'
        date_part = date_time_str
        time_part = ''
        if error_msg:
            await update.message.reply_text(error_msg, parse_mode='HTML')
            return ASK_DATE_TIME # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–ø—Ä–æ—Å—É –¥–∞—Ç—ã
    komoot_link = context.user_data.get('komoot_link', '-')
    route_name = context.user_data.get('route_name', '-')
    start_point_name = context.user_data.get('start_point_name', '-')
    start_point_link = context.user_data.get('start_point_link', '-')
    length_km = context.user_data.get('length_km', '-')
    uphill = context.user_data.get('uphill', '-')
    pace = context.user_data.get('pace', '-')
    comment = context.user_data.get('comment', '-')
    gpx_path = context.user_data.get('gpx_path', None)
    pace_emoji = pace.split(' ')[0] if pace else '-'
    announce = (
        f"<b>{weekday}, {date_part}, {time_of_day} ({time_part})</b>\n"
        f"–ú–∞—Ä—à—Ä—É—Ç: {route_name} ‚ÜîÔ∏è {length_km} –∫–º ‚õ∞ {uphill} –º (<a href=\"{komoot_link}\">–∫–æ–º—É—Ç</a>)\n\n"
        f"–°—Ç–∞—Ä—Ç: <a href=\"{start_point_link}\">{start_point_name}</a>, –≤—ã–µ–∑–¥ –≤ {time_part}\n"
        f"–û–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø: {pace_emoji}\n"
        f"\n"
        f"{comment}"
    )
    # –ö–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    buttons = [["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"]]
    for step, name in STEP_TO_NAME.items():
        buttons.append([name])
    await update.message.reply_text(
        announce + '\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?',
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True),
        disable_web_page_preview=True
    )
    return PREVIEW_STEP

async def preview_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚Äî –ø—É–±–ª–∏–∫—É–µ–º –∞–Ω–æ–Ω—Å –∏ GPX
    if text == '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å':
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–æ–Ω—Å (—Ç–æ—Ç –∂–µ –∫–æ–¥, —á—Ç–æ –≤ preview_step)
        date_time_str = context.user_data.get('date_time', '-')
        dt, error_msg = parse_date_time(date_time_str)
        if dt:
            weekday = RU_WEEKDAYS[dt.weekday()]
            time_of_day = get_time_of_day(dt)
            date_part = dt.strftime('%d.%m')
            time_part = dt.strftime('%H:%M')
        else:
            weekday = '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏?'
            time_of_day = '–≤—Ä–µ–º—è —Å—É—Ç–æ–∫?'
            date_part = date_time_str
            time_part = ''
            if error_msg:
                await update.message.reply_text(error_msg, parse_mode='HTML')
                return ASK_DATE_TIME # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–ø—Ä–æ—Å—É –¥–∞—Ç—ã
        komoot_link = context.user_data.get('komoot_link', '-')
        route_name = context.user_data.get('route_name', '-')
        start_point_name = context.user_data.get('start_point_name', '-')
        start_point_link = context.user_data.get('start_point_link', '-')
        length_km = context.user_data.get('length_km', '-')
        uphill = context.user_data.get('uphill', '-')
        pace = context.user_data.get('pace', '-')
        comment = context.user_data.get('comment', '-')
        gpx_path = context.user_data.get('gpx_path', None)
        pace_emoji = pace.split(' ')[0] if pace else '-'
        announce = (
            f"<b>{weekday}, {date_part}, {time_of_day} ({time_part})</b>\n"
            f"–ú–∞—Ä—à—Ä—É—Ç: {route_name} ‚ÜîÔ∏è {length_km} –∫–º ‚õ∞ {uphill} –º (<a href=\"{komoot_link}\">–∫–æ–º—É—Ç</a>)\n\n"
            f"–°—Ç–∞—Ä—Ç: <a href=\"{start_point_link}\">{start_point_name}</a>, –≤—ã–µ–∑–¥ –≤ {time_part}\n"
            f"–û–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø: {pace_emoji}\n"
            f"\n"
            f"{comment}"
        )
        await update.message.reply_text(announce, parse_mode='HTML', disable_web_page_preview=True)
        if gpx_path:
            with open(gpx_path, 'rb') as f:
                await update.message.reply_document(f, filename=os.path.basename(gpx_path))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "‚úÖ <b>–ê–Ω–æ–Ω—Å —Å–æ–∑–¥–∞–Ω, –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –¥—Ä—É–∑—å—è–º.</b>\n\n"
            "üö¥‚Äç‚ôÇÔ∏è <b>–•–æ—Ä–æ—à–µ–π –ø–æ–∫–∞—Ç—É—à–∫–∏!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–Ω–æ–Ω—Å–∞.",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove()
        )
        
        return ConversationHandler.END
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –Ω—É–∂–Ω—ã–π —ç—Ç–∞–ø
    for step, name in STEP_TO_NAME.items():
        if text == name:
            context.user_data['edit_mode'] = True
            if step == ASK_DATE_TIME:
                await update.message.reply_text('–£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞:', reply_markup=ReplyKeyboardRemove())
                return ASK_DATE_TIME
            elif step == ASK_KOMOOT_LINK:
                await update.message.reply_text('–ü—Ä–∏—à–ª–∏ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot:', reply_markup=ReplyKeyboardRemove())
                return ASK_KOMOOT_LINK
            elif step == ASK_ROUTE_NAME:
                await update.message.reply_text('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞:', reply_markup=ReplyKeyboardRemove())
                return ASK_ROUTE_NAME
            elif step == ASK_START_POINT:
                keyboard = [[p['name']] for p in START_POINTS]
                await update.message.reply_text('–í—ã–±–µ—Ä–∏ —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞:', reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
                return ASK_START_POINT
            elif step == ASK_PACE:
                keyboard = [[p] for p in PACE_OPTIONS]
                await update.message.reply_text('–í—ã–±–µ—Ä–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É–Ω):', reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
                return ASK_PACE
            elif step == ASK_COMMENT:
                await update.message.reply_text('–í–≤–µ–¥–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', reply_markup=ReplyKeyboardRemove())
                return ASK_COMMENT
    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    return await preview_step(update, context)

async def restart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ"""
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    await update.message.reply_text(
        "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–Ω–æ–Ω—Å–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    cache_files = glob.glob(f"{CACHE_DIR}/*.gpx")
    cache_size = len(cache_files)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
    total_size = 0
    if cache_files:
        total_size = sum(os.path.getsize(f) for f in cache_files)
    
    status_text = f"ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
    status_text += f"üìÅ –§–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ: {cache_size}\n"
    status_text += f"üíæ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {total_size / 1024:.1f} KB\n"
    status_text += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n"
    status_text += f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}\n"
    
    if cache_size > 10:
        status_text += "\n‚ö†Ô∏è –ú–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ! –ò—Å–ø–æ–ª—å–∑—É–π /clear_cache"
    elif cache_size == 0:
        status_text += "\n‚úÖ –ö—ç—à –ø—É—Å—Ç"
    else:
        status_text += f"\n‚úÖ –ö—ç—à –≤ –ø–æ—Ä—è–¥–∫–µ ({cache_size} —Ñ–∞–π–ª–æ–≤)"
    
    status_text += "\nüîÑ –ö—ç—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ 180 –¥–Ω–µ–π"
    
    await update.message.reply_text(status_text, parse_mode='HTML')

def cleanup_old_gpx_files():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç GPX —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 180 –¥–Ω–µ–π"""
    try:
        current_time = datetime.now()
        cache_files = glob.glob(f"{CACHE_DIR}/*.gpx")
        deleted_count = 0
        
        for file_path in cache_files:
            try:
                file_time = datetime.fromtimestamp(os.path.getmtime(file_path))
                if (current_time - file_time).days > 180:
                    os.remove(file_path)
                    logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {file_path}")
                    deleted_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
        if deleted_count > 0:
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö GPX —Ñ–∞–π–ª–æ–≤")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ: {e}")

async def preload_ready_routes():
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ –∫–µ—à"""
    logger.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≥–æ—Ç–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ –∫–µ—à...")
    
    for route in ROUTE_COMMENTS:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º tour_id –∏–∑ —Å—Å—ã–ª–∫–∏
            match = KOMOOT_LINK_PATTERN.search(route['link'])
            if not match:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å tour_id –∏–∑ —Å—Å—ã–ª–∫–∏: {route['link']}")
                continue
                
            tour_id = match.group(3)
            route_name = route['name']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–∞–π–ª –≤ –∫–µ—à–µ
            gpx_files = glob.glob(f"{CACHE_DIR}/*-{tour_id}.gpx")
            if gpx_files:
                logger.info(f"–ú–∞—Ä—à—Ä—É—Ç '{route_name}' —É–∂–µ –≤ –∫–µ—à–µ, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                continue
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ä—à—Ä—É—Ç '{route_name}' (tour_id: {tour_id})")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º GPX
            process = await asyncio.create_subprocess_exec(
                'komootgpx',
                '-d', tour_id,
                '-o', CACHE_DIR,
                '-e',
                '-n',
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            try:
                stdout, stderr = await asyncio.wait_for(process.communicate(), timeout=60.0)
                if process.returncode == 0:
                    logger.info(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç '{route_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–µ—à")
                else:
                    error_msg = stderr.decode() if stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞ '{route_name}': {error_msg}")
            except asyncio.TimeoutError:
                logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞ '{route_name}', —É–±–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å")
                process.kill()
                
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞ '{route.get('name', 'Unknown')}': {e}")
    
    logger.info("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def preload_ready_routes_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ç–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    logger.info("–ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –≥–æ—Ç–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ –∫–µ—à...")
    
    for route in ROUTE_COMMENTS:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º tour_id –∏–∑ —Å—Å—ã–ª–∫–∏
            match = KOMOOT_LINK_PATTERN.search(route['link'])
            if not match:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å tour_id –∏–∑ —Å—Å—ã–ª–∫–∏: {route['link']}")
                continue
                
            tour_id = match.group(3)
            route_name = route['name']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–∞–π–ª –≤ –∫–µ—à–µ
            gpx_files = glob.glob(f"{CACHE_DIR}/*-{tour_id}.gpx")
            if gpx_files:
                logger.info(f"–ú–∞—Ä—à—Ä—É—Ç '{route_name}' —É–∂–µ –≤ –∫–µ—à–µ, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                continue
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ä—à—Ä—É—Ç '{route_name}' (tour_id: {tour_id})")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º GPX —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            import subprocess
            try:
                result = subprocess.run(
                    ['komootgpx', '-d', tour_id, '-o', CACHE_DIR, '-e', '-n'],
                    capture_output=True,
                    text=True,
                    timeout=60
                )
                
                if result.returncode == 0:
                    logger.info(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç '{route_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–µ—à")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞ '{route_name}': {result.stderr}")
                    
            except subprocess.TimeoutExpired:
                logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞ '{route_name}'")
            except FileNotFoundError:
                logger.error(f"‚ùå komootgpx –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                break
                
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞ '{route.get('name', 'Unknown')}': {e}")
    
    logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

async def clear_cache_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
        cleanup_old_gpx_files()
        
        cache_files = glob.glob(f"{CACHE_DIR}/*.gpx")
        deleted_count = 0
        
        for file_path in cache_files:
            try:
                os.remove(file_path)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –∫—ç—à–∞: {file_path}")
                deleted_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file_path}: {e}")
        
        if deleted_count == 0:
            await update.message.reply_text("üóëÔ∏è –ö—ç—à —É–∂–µ –ø—É—Å—Ç!")
        else:
            await update.message.reply_text(f"üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω! –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {str(e)}")

if __name__ == '__main__':
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ GPX —Ñ–∞–π–ª—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    cleanup_old_gpx_files()
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ –∫–µ—à
    preload_ready_routes_sync()
    
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞ –∏ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
    app.add_handler(CommandHandler('status', status_command))
    app.add_handler(CommandHandler('clear_cache', clear_cache_command))
    app.add_handler(CommandHandler('help', help_command))


    
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CommandHandler('quick', quick_command)
        ],
        states={
            ASK_DATE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_date_time)],
            ASK_KOMOOT_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_komoot_link)],
            ASK_ROUTE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_route_name)],
            ASK_START_POINT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_start_point)],
            ASK_START_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_start_link)],
            ASK_PACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_pace)],
            ASK_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_comment)],
            PREVIEW_STEP: [MessageHandler(filters.TEXT & ~filters.COMMAND, preview_handler)],
            SELECT_ROUTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_route_selection)],
        },
        fallbacks=[CommandHandler('restart', restart_command)],
    )
    app.add_handler(conv_handler)
    print('Bot started...')
    app.run_polling() 