import os
import re
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
)
import logging
import subprocess
import glob
import gpxpy
import gpxpy.gpx
from datetime import datetime, timedelta
from dotenv import load_dotenv
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ASK_DATE_TIME, ASK_KOMOOT_LINK, PROCESS_GPX, ASK_ROUTE_NAME, ASK_START_POINT, ASK_START_LINK, ASK_PACE, ASK_COMMENT, PREVIEW_STEP = range(9)

STEP_TO_NAME = {
    ASK_DATE_TIME: '‚úèÔ∏è –¥–∞—Ç—É',
    ASK_KOMOOT_LINK: '‚úèÔ∏è —Å—Å—ã–ª–∫—É Komoot',
    ASK_ROUTE_NAME: '‚úèÔ∏è –Ω–∞–∑–≤–∞–Ω–∏–µ',
    ASK_START_POINT: '‚úèÔ∏è —Å—Ç–∞—Ä—Ç',
    ASK_PACE: '‚úèÔ∏è —Ç–µ–º–ø',
    ASK_COMMENT: '‚úèÔ∏è –∫–æ–º–º–µ–Ω.',
}

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', 'YOUR_TELEGRAM_BOT_TOKEN')

# –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è tour_id –∏–∑ Komoot-—Å—Å—ã–ª–∫–∏
KOMOOT_LINK_PATTERN = re.compile(r'(https?://)?(www\.)?komoot\.[^/]+/tour/(\d+)')
CACHE_DIR = 'cache'
os.makedirs(CACHE_DIR, exist_ok=True)

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞ (–∑–∞–ø–æ–ª–Ω–∏—à—å –ø–æ—Ç–æ–º)
START_POINTS = [
    {'name': 'koferajd', 'link': 'https://maps.app.goo.gl/iTBcRqjvhJ9DYvRK7'},
    {'name': '–§–ª–∞–≥–∏', 'link': 'https://maps.app.goo.gl/j95ME2cuzX8k9hnj7'},
    {'name': '–õ–∏–¥–ª –õ–∏–º–∞–Ω', 'link': 'https://maps.app.goo.gl/5JKtAgGBVe48jM9r7'},
    {'name': '–ñ–µ–ª–µ–∑–Ω–∏—á–∫–∞ –ü–∞—Ä–∫', 'link': 'https://maps.app.goo.gl/hSZ9C4Xue5RVpMea8'},
    {'name': '–°–≤–æ—è —Ç–æ—á–∫–∞', 'link': None},
]

PACE_OPTIONS = [
    'üåùüåöüåö',
    'üåùüåóüåö',
    'üåùüåùüåö',
    'üåùüåùüåó',
    'üåùüåùüåù',
]

RU_WEEKDAYS = [
    '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
]

def get_time_of_day(dt: datetime) -> str:
    if dt.hour < 12:
        return '—É—Ç—Ä–æ'
    elif dt.hour < 18:
        return '–¥–µ–Ω—å'
    else:
        return '–≤–µ—á–µ—Ä'

def parse_date_time(date_time_str: str) -> datetime:
    # –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: 19.07 10:00
    try:
        dt = datetime.strptime(date_time_str, '%d.%m %H:%M')
        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
        dt = dt.replace(year=datetime.now().year)
        return dt
    except Exception:
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tomorrow = datetime.now() + timedelta(days=1)
    date_example = tomorrow.strftime('%d.%m')
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –∞–Ω–æ–Ω—Å –ø–æ–µ–∑–¥–∫–∏.\n\n'
        f'–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `{date_example} 10:00`)',
        parse_mode='Markdown'
    )
    return ASK_DATE_TIME

async def ask_date_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ user_data
    context.user_data['date_time'] = update.message.text.strip()
    if context.user_data.get('edit_mode'):
        context.user_data['edit_mode'] = False
        return await preview_step(update, context)
    await update.message.reply_text(
        '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://www.komoot.com/tour/1234567890):'
    )
    return ASK_KOMOOT_LINK

async def ask_komoot_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    match = KOMOOT_LINK_PATTERN.search(text)
    if not match:
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://www.komoot.com/tour/1234567890)'
        )
        return ASK_KOMOOT_LINK
    context.user_data['komoot_link'] = text
    context.user_data['tour_id'] = match.group(3)
    if context.user_data.get('edit_mode'):
        context.user_data['edit_mode'] = False
        return await preview_step(update, context)
    await update.message.reply_text('–°–∫–∞—á–∏–≤–∞—é –º–∞—Ä—à—Ä—É—Ç –∏ –∏–∑–≤–ª–µ–∫–∞—é –¥–∞–Ω–Ω—ã–µ...')
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ GPX
    return await process_gpx(update, context)

async def process_gpx(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tour_id = context.user_data['tour_id']
    try:
        subprocess.run([
            'komootgpx',
            '-d', tour_id,
            '-o', CACHE_DIR,
            '-e',
            '-n'
        ], check=True, capture_output=True, text=True)
    except subprocess.CalledProcessError as e:
        await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ GPX. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –º–∞—Ä—à—Ä—É—Ç –ø—É–±–ª–∏—á–Ω—ã–π –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.')
        await update.message.reply_text('–ü—Ä–∏—à–ª–∏ –¥—Ä—É–≥—É—é –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot:')
        return ASK_KOMOOT_LINK
    gpx_files = glob.glob(f"{CACHE_DIR}/*-{tour_id}.gpx")
    if not gpx_files:
        await update.message.reply_text('GPX-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot:')
        return ASK_KOMOOT_LINK
    gpx_path = gpx_files[0]
    context.user_data['gpx_path'] = gpx_path
    try:
        with open(gpx_path, 'r') as f:
            gpx = gpxpy.parse(f)
        length_km = gpx.length_2d() / 1000
        uphill = gpx.get_uphill_downhill()[0]
        context.user_data['length_km'] = round(length_km)
        context.user_data['uphill'] = round(uphill)
    except Exception as e:
        await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GPX-—Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot:')
        return ASK_KOMOOT_LINK
    await update.message.reply_text('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –®–∞–π–∫–∞—à - –ß—É—Ä—É–≥ - –°—Ä–±–æ–±—Ä–∞–Ω - –¢–µ–º–µ—Ä–∏–Ω):')
    return ASK_ROUTE_NAME

async def ask_route_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['route_name'] = update.message.text.strip()
    if context.user_data.get('edit_mode'):
        context.user_data['edit_mode'] = False
        return await preview_step(update, context)
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞
    keyboard = [[p['name']] for p in START_POINTS]
    await update.message.reply_text(
        f"–ú–∞—Ä—à—Ä—É—Ç: {context.user_data['length_km']} –∫–º, –Ω–∞–±–æ—Ä: {context.user_data['uphill']} –º\n\n–í—ã–±–µ—Ä–∏ —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return ASK_START_POINT

async def ask_start_point(update: Update, context: ContextTypes.DEFAULT_TYPE):
    point_name = update.message.text.strip()
    point = next((p for p in START_POINTS if p['name'] == point_name), None)
    if not point:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.')
        return ASK_START_POINT
    if point['name'] == '–°–≤–æ—è —Ç–æ—á–∫–∞':
        context.user_data['start_point_name'] = None
        context.user_data['start_point_link'] = None
        await update.message.reply_text('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞:')
        return ASK_START_LINK
    else:
        context.user_data['start_point_name'] = point['name']
        context.user_data['start_point_link'] = point['link']
        if context.user_data.get('edit_mode'):
            context.user_data['edit_mode'] = False
            return await preview_step(update, context)
        keyboard = [[p] for p in PACE_OPTIONS]
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É–Ω):',
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_PACE

async def ask_start_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∏–º–µ–Ω–∏, –∑–Ω–∞—á–∏—Ç —Å–µ–π—á–∞—Å –∂–¥—ë–º –∏–º—è, –∏–Ω–∞—á–µ –∂–¥—ë–º —Å—Å—ã–ª–∫—É
    if not context.user_data.get('start_point_name'):
        context.user_data['start_point_name'] = update.message.text.strip()
        await update.message.reply_text('–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps –¥–ª—è —Å–≤–æ–µ–π —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞:')
        return ASK_START_LINK
    else:
        link = update.message.text.strip()
        if not (link.startswith('http://') or link.startswith('https://')):
            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http...)')
            return ASK_START_LINK
        context.user_data['start_point_link'] = link
        if context.user_data.get('edit_mode'):
            context.user_data['edit_mode'] = False
            return await preview_step(update, context)
        keyboard = [[p] for p in PACE_OPTIONS]
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É–Ω):',
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_PACE

async def ask_pace(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pace = update.message.text.strip()
    if pace not in PACE_OPTIONS:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–µ–º–ø –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
        return ASK_PACE
    context.user_data['pace'] = pace
    if context.user_data.get('edit_mode'):
        context.user_data['edit_mode'] = False
        return await preview_step(update, context)
    await update.message.reply_text(
        '–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–Ω–æ–Ω—Å—É (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫):',
        reply_markup=ReplyKeyboardRemove()
    )
    return ASK_COMMENT

async def ask_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text.strip()
    context.user_data['comment'] = comment
    if context.user_data.get('edit_mode'):
        context.user_data['edit_mode'] = False
        return await preview_step(update, context)
    return await preview_step(update, context)

async def preview_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–æ–Ω—Å
    date_time_str = context.user_data.get('date_time', '-')
    dt = parse_date_time(date_time_str)
    if dt:
        weekday = RU_WEEKDAYS[dt.weekday()]
        time_of_day = get_time_of_day(dt)
        date_part = dt.strftime('%d.%m')
        time_part = dt.strftime('%H:%M')
    else:
        weekday = '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏?'
        time_of_day = '–≤—Ä–µ–º—è —Å—É—Ç–æ–∫?'
        date_part = date_time_str
        time_part = ''
    komoot_link = context.user_data.get('komoot_link', '-')
    route_name = context.user_data.get('route_name', '-')
    start_point_name = context.user_data.get('start_point_name', '-')
    start_point_link = context.user_data.get('start_point_link', '-')
    length_km = context.user_data.get('length_km', '-')
    uphill = context.user_data.get('uphill', '-')
    pace = context.user_data.get('pace', '-')
    comment = context.user_data.get('comment', '-')
    gpx_path = context.user_data.get('gpx_path', None)
    pace_emoji = pace.split(' ')[0] if pace else '-'
    announce = (
        f"**{weekday}, {date_part}, {time_of_day} ({time_part})**\n"
        f"–ú–∞—Ä—à—Ä—É—Ç: {route_name} ‚ÜîÔ∏è {length_km} –∫–º ‚õ∞ {uphill} –º –∫–æ–º—É—Ç ([—Å—Å—ã–ª–∫–∞]({komoot_link}))\n\n"
        f"–°—Ç–∞—Ä—Ç: [{start_point_name}]({start_point_link}), –≤—ã–µ–∑–¥ –≤ {time_part}\n"
        f"–û–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø: {pace_emoji}\n"
        f"\n"
        f"{comment}"
    )
    # –ö–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    buttons = [["–û—Ç–ø—Ä–∞–≤–∏—Ç—å"]]
    for step, name in STEP_TO_NAME.items():
        buttons.append([name])
    await update.message.reply_text(
        announce + '\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?',
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True),
        disable_web_page_preview=True
    )
    return PREVIEW_STEP

async def preview_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚Äî –ø—É–±–ª–∏–∫—É–µ–º –∞–Ω–æ–Ω—Å –∏ GPX
    if text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å':
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–æ–Ω—Å (—Ç–æ—Ç –∂–µ –∫–æ–¥, —á—Ç–æ –≤ preview_step)
        date_time_str = context.user_data.get('date_time', '-')
        dt = parse_date_time(date_time_str)
        if dt:
            weekday = RU_WEEKDAYS[dt.weekday()]
            time_of_day = get_time_of_day(dt)
            date_part = dt.strftime('%d.%m')
            time_part = dt.strftime('%H:%M')
        else:
            weekday = '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏?'
            time_of_day = '–≤—Ä–µ–º—è —Å—É—Ç–æ–∫?'
            date_part = date_time_str
            time_part = ''
        komoot_link = context.user_data.get('komoot_link', '-')
        route_name = context.user_data.get('route_name', '-')
        start_point_name = context.user_data.get('start_point_name', '-')
        start_point_link = context.user_data.get('start_point_link', '-')
        length_km = context.user_data.get('length_km', '-')
        uphill = context.user_data.get('uphill', '-')
        pace = context.user_data.get('pace', '-')
        comment = context.user_data.get('comment', '-')
        gpx_path = context.user_data.get('gpx_path', None)
        pace_emoji = pace.split(' ')[0] if pace else '-'
        announce = (
            f"**{weekday}, {date_part}, {time_of_day} ({time_part})**\n"
            f"–ú–∞—Ä—à—Ä—É—Ç: {route_name} ‚ÜîÔ∏è {length_km} –∫–º ‚õ∞ {uphill} –º –∫–æ–º—É—Ç ([—Å—Å—ã–ª–∫–∞]({komoot_link}))\n\n"
            f"–°—Ç–∞—Ä—Ç: [{start_point_name}]({start_point_link}), –≤—ã–µ–∑–¥ –≤ {time_part}\n"
            f"–û–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø: {pace_emoji}\n"
            f"\n"
            f"{comment}"
        )
        await update.message.reply_text(announce, parse_mode='Markdown', disable_web_page_preview=True)
        if gpx_path:
            with open(gpx_path, 'rb') as f:
                await update.message.reply_document(f, filename=os.path.basename(gpx_path))
        return ConversationHandler.END
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –Ω—É–∂–Ω—ã–π —ç—Ç–∞–ø
    for step, name in STEP_TO_NAME.items():
        if text == name:
            context.user_data['edit_mode'] = True
            if step == ASK_DATE_TIME:
                await update.message.reply_text('–£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞:', reply_markup=ReplyKeyboardRemove())
                return ASK_DATE_TIME
            elif step == ASK_KOMOOT_LINK:
                await update.message.reply_text('–ü—Ä–∏—à–ª–∏ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot:', reply_markup=ReplyKeyboardRemove())
                return ASK_KOMOOT_LINK
            elif step == ASK_ROUTE_NAME:
                await update.message.reply_text('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞:', reply_markup=ReplyKeyboardRemove())
                return ASK_ROUTE_NAME
            elif step == ASK_START_POINT:
                keyboard = [[p['name']] for p in START_POINTS]
                await update.message.reply_text('–í—ã–±–µ—Ä–∏ —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞:', reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
                return ASK_START_POINT
            elif step == ASK_PACE:
                keyboard = [[p] for p in PACE_OPTIONS]
                await update.message.reply_text('–í—ã–±–µ—Ä–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É–Ω):', reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
                return ASK_PACE
            elif step == ASK_COMMENT:
                await update.message.reply_text('–í–≤–µ–¥–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', reply_markup=ReplyKeyboardRemove())
                return ASK_COMMENT
    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    return await preview_step(update, context)

if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ASK_DATE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_date_time)],
            ASK_KOMOOT_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_komoot_link)],
            ASK_ROUTE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_route_name)],
            ASK_START_POINT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_start_point)],
            ASK_START_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_start_link)],
            ASK_PACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_pace)],
            ASK_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_comment)],
            PREVIEW_STEP: [MessageHandler(filters.TEXT & ~filters.COMMAND, preview_handler)],
        },
        fallbacks=[],
    )
    app.add_handler(conv_handler)
    print('Bot started...')
    app.run_polling() 