import os
import re
import json
import subprocess
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
)
import logging
import asyncio
import glob
import gpxpy
import gpxpy.gpx
from datetime import datetime, timedelta
from dotenv import load_dotenv
import pytz
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ASK_DATE, ASK_TIME, ASK_KOMOOT_LINK, PROCESS_GPX, ASK_ROUTE_NAME, ASK_START_POINT, ASK_START_LINK, ASK_FINISH_POINT, ASK_FINISH_LINK, ASK_PACE, ASK_COMMENT, ASK_IMAGE, PREVIEW_STEP, SELECT_ROUTE = range(14)

STEP_TO_NAME = {
    ASK_DATE: 'üìÖ –ò–∑–º. –¥–∞—Ç—É',
    ASK_TIME: '‚è∞ –ò–∑–º. –≤—Ä–µ–º—è',
    ASK_KOMOOT_LINK: 'üîó –ò–∑–º. —Å—Å—ã–ª–∫—É Komoot',
    ASK_ROUTE_NAME: 'üìù –ò–∑–º. –Ω–∞–∑–≤–∞–Ω–∏–µ',
    ASK_START_POINT: 'üìç –ò–∑–º. —Å—Ç–∞—Ä—Ç',
    ASK_FINISH_POINT: 'üèÅ –ò–∑–º. —Ñ–∏–Ω–∏—à',
    ASK_PACE: 'üåô –ò–∑–º. —Ç–µ–º–ø',
    ASK_COMMENT: 'üí¨ –ò–∑–º. –∫–æ–º–º–µ–Ω.',
    ASK_IMAGE: 'üì∑ –ò–∑–º. –∫–∞—Ä—Ç–∏–Ω–∫—É',
}

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', 'YOUR_TELEGRAM_BOT_TOKEN')
TIMEZONE = os.getenv('TIMEZONE', 'Europe/Belgrade')

# –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è tour_id –∏–∑ Komoot-—Å—Å—ã–ª–∫–∏
KOMOOT_LINK_PATTERN = re.compile(r'(https?://)?(www\.)?komoot\.[^/]+/tour/(\d+)')
CACHE_DIR = 'cache'
os.makedirs(CACHE_DIR, exist_ok=True)

def load_points_from_file(filename, fallback_points=None):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ—á–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞

    Args:
        filename (str): –ò–º—è —Ñ–∞–π–ª–∞ (start_points.json –∏–ª–∏ finish_points.json)
        fallback_points (list): –¢–æ—á–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω

    Returns:
        list: –°–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ —Å –ø–æ–ª—è–º–∏ name –∏ link
    """
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)

            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - —Ç–æ—á–∫–∏ –≤ –º–∞—Å—Å–∏–≤–µ "points"
            if 'points' in data and isinstance(data['points'], list):
                points = data['points']
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            elif 'start_points' in data:
                points = data['start_points']
            else:
                points = []

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º "–°–≤–æ—é —Ç–æ—á–∫—É" –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
            points.append({
                'name': '–°–≤–æ—è —Ç–æ—á–∫–∞',
                'link': None
            })

            return points

    except FileNotFoundError:
        logger.warning(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return fallback_points or get_default_points()

    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {filename}: {e}")
        return fallback_points or get_default_points()

    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ—á–µ–∫ –∏–∑ {filename}: {e}")
        return fallback_points or get_default_points()

def get_default_points():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—á–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    default_points = [
        {'name': 'koferajd', 'link': 'https://maps.app.goo.gl/iTBcRqjvhJ9DYvRK7'},
        {'name': '–§–ª–∞–≥–∏', 'link': 'https://maps.app.goo.gl/j95ME2cuzX8k9hnj7'},
        {'name': '–õ–∏–¥–ª –õ–∏–º–∞–Ω', 'link': 'https://maps.app.goo.gl/5JKtAgGBVe48jM9r7'},
        {'name': '–ñ–µ–ª–µ–∑–Ω–∏—á–∫–∞ –ü–∞—Ä–∫', 'link': 'https://maps.app.goo.gl/hSZ9C4Xue5RVpMea8'},
        {'name': '–ú–∞–∫—Å–∏ —É –ë—É–ª—å–≤–∞—Ä–∞ –ï–≤—Ä–æ–ø—ã', 'link': 'https://maps.app.goo.gl/3ZbDZM9VVRBDDddp8?g_st=ipc'},
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º "–°–≤–æ—é —Ç–æ—á–∫—É"
    default_points.append({
        'name': '–°–≤–æ—è —Ç–æ—á–∫–∞',
        'link': None
    })

    return default_points

def load_start_points():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    return load_points_from_file("start_points.json")

def load_finish_points():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ—á–∫–∏ —Ñ–∏–Ω–∏—à–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    return load_points_from_file("finish_points.json")

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞ –∏ —Ñ–∏–Ω–∏—à–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
START_POINTS = load_start_points()
FINISH_POINTS = load_finish_points()

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞ (–∑–∞–ø–æ–ª–Ω–∏—à—å –ø–æ—Ç–æ–º)
# START_POINTS = [
#     {'name': 'koferajd', 'link': 'https://maps.app.goo.gl/iTBcRqjvhJ9DYvRK7'},
#     {'name': '–§–ª–∞–≥–∏', 'link': 'https://maps.app.goo.gl/j95ME2cuzX8k9hnj7'},
#     {'name': '–õ–∏–¥–ª –õ–∏–º–∞–Ω', 'link': 'https://maps.app.goo.gl/5JKtAgGBVe48jM9r7'},
#     {'name': '–ñ–µ–ª–µ–∑–Ω–∏—á–∫–∞ –ü–∞—Ä–∫', 'link': 'https://maps.app.goo.gl/hSZ9C4Xue5RVpMea8'},
#     {'name': '–°–≤–æ—è —Ç–æ—á–∫–∞', 'link': None},
# ]

PACE_OPTIONS = [
    'üåùüåöüåö',
    'üåùüåóüåö',
    'üåùüåùüåö',
    'üåùüåùüåó',
    'üåùüåùüåù',
]

RU_WEEKDAYS = [
    '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
]

def get_time_of_day(dt: datetime) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ datetime –æ–±—ä–µ–∫—Ç–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å timezone-aware)"""
    if dt.hour < 12:
        return '—É—Ç—Ä–æ'
    elif dt.hour < 18:
        return '–¥–µ–Ω—å'
    else:
        return '–≤–µ—á–µ—Ä'

def extract_route_name_from_gpx(gpx_path: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ GPX —Ñ–∞–π–ª–∞"""
    try:
        import xml.etree.ElementTree as ET

        tree = ET.parse(gpx_path)
        root = tree.getroot()

        # –ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ metadata
        metadata = root.find('{http://www.topografix.com/GPX/1/1}metadata')
        if metadata is not None:
            name_elem = metadata.find('{http://www.topografix.com/GPX/1/1}name')
            if name_elem is not None and name_elem.text:
                return name_elem.text.strip()

        # –ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ trk (track)
        trk = root.find('{http://www.topografix.com/GPX/1/1}trk')
        if trk is not None:
            name_elem = trk.find('{http://www.topografix.com/GPX/1/1}name')
            if name_elem is not None and name_elem.text:
                return name_elem.text.strip()

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        return ""

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ GPX: {e}")
        return ""

def parse_date_time(date_time_str: str) -> tuple[datetime, str]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (datetime, error_message)
    –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: 19.07 10:00
    –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π –∏–∑ TIMEZONE
    """
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –±–µ–∑ timezone
        dt_naive = datetime.strptime(date_time_str, '%d.%m %H:%M')
        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
        dt_naive = dt_naive.replace(year=datetime.now().year)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        try:
            tz = pytz.timezone(TIMEZONE)
        except pytz.exceptions.UnknownTimeZoneError:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è timezone, –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {TIMEZONE}, –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC")
            tz = pytz.UTC

        # –°–æ–∑–¥–∞–µ–º timezone-aware datetime
        dt = tz.localize(dt_naive)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ç–æ–π –∂–µ timezone –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        now = datetime.now(tz)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if dt.date() < now.date():
            return None, "‚ùå <b>–£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞!</b> –£–∫–∞–∂–∏ –±—É–¥—É—â—É—é –¥–∞—Ç—É."
        elif dt.date() == now.date() and dt.time() <= now.time():
            return None, "‚ùå <b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ!</b> –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º."

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º (–±–æ–ª—å—à–µ –≥–æ–¥–∞)
        if dt > now + timedelta(days=365):
            return None, "‚ùå <b>–î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º!</b> –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥–æ–¥–∞."

        return dt, None

    except ValueError:
        return None, "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b> –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 19.07 10:00)"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã: {str(e)}", exc_info=True)
        return None, f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã:</b> {str(e)}"

def load_ready_routes():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open('ready_routes.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            routes = data.get('ready_routes', [])
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥–æ—Ç–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(routes)}")
            for i, route in enumerate(routes):
                logger.info(f"–ú–∞—Ä—à—Ä—É—Ç {i+1}: {route['name']} -> {route['start_point']}")
            return routes
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª ready_routes.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ready_routes.json: {e}")
        return []
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–æ—Ç–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤: {e}")
        return []

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
READY_ROUTES = load_ready_routes()

def load_route_comments():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open('routes.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            routes = data.get('routes', [])
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥–æ—Ç–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç—ã: {len(routes)}")
            return routes
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª routes.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ routes.json: {e}")
        return []
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–æ—Ç–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫: {e}")
        return []

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
ROUTE_COMMENTS = load_route_comments()

async def quick_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–æ–Ω—Å–∞ –∏–∑ –≥–æ—Ç–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞"""
    logger.info(f"quick_command –≤—ã–∑–≤–∞–Ω, READY_ROUTES: {len(READY_ROUTES)}")
    
    if not READY_ROUTES:
        logger.warning("READY_ROUTES –ø—É—Å—Ç")
        await update.message.reply_text(
            "‚ùå –ì–æ—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ç–æ–≤—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
    keyboard = []
    for i, route in enumerate(READY_ROUTES):
        keyboard.append([f"{i+1}. {route['name']}"])
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: {i+1}. {route['name']}")
    
    keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])
    
    await update.message.reply_text(
        "üö¥‚Äç‚ôÇÔ∏è <b>–í—ã–±–µ—Ä–∏ –≥–æ—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç:</b>\n\n"
        "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –º–∞—Ä—à—Ä—É—Ç, –∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ —Ç–µ–º–ø!",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    context.user_data['quick_mode'] = True
    logger.info("quick_command –∑–∞–≤–µ—Ä—à–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º SELECT_ROUTE")
    return SELECT_ROUTE

async def handle_route_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ç–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞"""
    text = update.message.text.strip()
    logger.info(f"handle_route_selection –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: '{text}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞")
        await update.message.reply_text(
            "‚ùå –í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–Ω–æ–Ω—Å–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞
    if text.startswith(('1.', '2.', '3.', '4.', '5.')):
        try:
            route_index = int(text.split('.')[0]) - 1
            logger.info(f"–í—ã–±—Ä–∞–Ω –º–∞—Ä—à—Ä—É—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º: {route_index}")
            if 0 <= route_index < len(READY_ROUTES):
                route = READY_ROUTES[route_index]
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –º–∞—Ä—à—Ä—É—Ç: {route['name']}")
                context.user_data.update({
                    'komoot_link': route['komoot_link'],
                    'route_name': route['name'],
                    'start_point_name': route['start_point'],
                    'start_point_link': route['start_point_link'],
                    'comment': route['comment'],
                    'quick_mode': True
                })
                
                await update.message.reply_text(
                    f"üö¥‚Äç‚ôÇÔ∏è <b>–í—ã–±—Ä–∞–Ω –≥–æ—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç:</b>\n\n"
                    f"<b>{route['name']}</b>\n"
                    f"üìç –°—Ç–∞—Ä—Ç: {route['start_point']}\n"
                    f"üí¨ {route['comment']}\n\n"
                    f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>26.08 10:00</code>)",
                    parse_mode='HTML',
                    reply_markup=ReplyKeyboardRemove()
                )
                return ASK_DATE
            else:
                logger.warning(f"–ò–Ω–¥–µ–∫—Å –º–∞—Ä—à—Ä—É—Ç–∞ {route_index} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
            pass
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É
    logger.info("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–Ω–æ–≤–∞")
    keyboard = []
    for i, route in enumerate(READY_ROUTES):
        keyboard.append([f"{i+1}. {route['name']}"])
    keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])
    
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –º–∞—Ä—à—Ä—É—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return SELECT_ROUTE

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –≤ –∫–æ–º–∞–Ω–¥–µ
    command_args = update.message.text.split()
    if len(command_args) > 1 and command_args[1].isdigit():
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
        route_index = int(command_args[1]) - 1
        if 0 <= route_index < len(READY_ROUTES):
            route = READY_ROUTES[route_index]
            context.user_data.update({
                'komoot_link': route['komoot_link'],
                'route_name': route['name'],
                'start_point_name': route['start_point'],
                'start_point_link': route['start_point_link'],
                'comment': route['comment'],
                'quick_mode': True
            })
            await update.message.reply_text(
                f"üö¥‚Äç‚ôÇÔ∏è <b>–í—ã–±—Ä–∞–Ω –≥–æ—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç:</b>\n\n"
                f"<b>{route['name']}</b>\n"
                f"üìç –°—Ç–∞—Ä—Ç: {route['start_point']}\n"
                f"üí¨ {route['comment']}\n\n"
                f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>26.08 10:00</code>)",
                parse_mode='HTML'
            )
            return ASK_DATE
    
    # –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç
    # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–æ–º–∞–Ω–¥—ã
    await update.message.reply_text(
        f'üö¥‚Äç‚ôÇÔ∏è <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–æ–Ω—Å–æ–≤ –≤–µ–ª–æ–ø–æ–µ–∑–¥–æ–∫</b>\n\n'
        f'–°–æ–∑–¥–∞–º –∫—Ä–∞—Å–∏–≤—ã–π –∞–Ω–æ–Ω—Å —Å –º–∞—Ä—à—Ä—É—Ç–æ–º, —Ç–æ—á–∫–æ–π —Å—Ç–∞—Ä—Ç–∞ –∏ –≤—Å–µ–º–∏ –¥–µ—Ç–∞–ª—è–º–∏.\n\n'
        f'<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n'
        f'‚Ä¢ /start - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–æ–Ω—Å\n'
        f'‚Ä¢ /help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n'
        f'‚Ä¢ /restart - —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
        parse_mode='HTML'
    )

    # –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    return await ask_date(update, context)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = (
        "üö¥‚Äç‚ôÇÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "<b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–æ–Ω—Å:</b>\n"
        "1. –£–∫–∞–∂–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú –ß–ß:–ú–ú)\n"
        "2. –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot\n"
        "3. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞\n"
        "4. –í—ã–±–µ—Ä–∏ —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞\n"
        "5. –£–∫–∞–∂–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É–Ω)\n"
        "6. –î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n"
        "7. –ü—Ä–æ–≤–µ—Ä—å –∏ –æ—Ç–ø—Ä–∞–≤—å –∞–Ω–æ–Ω—Å\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–æ–Ω—Å\n"
        "‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ /restart - —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n\n"
        "<b>–¢–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞:</b>\n"
        "‚Ä¢ koferajd, –§–ª–∞–≥–∏, –õ–∏–¥–ª –õ–∏–º–∞–Ω, –ñ–µ–ª–µ–∑–Ω–∏—á–∫–∞ –ü–∞—Ä–∫\n"
        "‚Ä¢ –ò–ª–∏ —É–∫–∞–∂–∏ —Å–≤–æ—é —Ç–æ—á–∫—É\n\n"
        "<b>–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:</b> –î–î.–ú–ú –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 19.07 10:00)"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')

async def ask_date_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ user_data
    date_time_str = update.message.text.strip()

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
    dt, error_msg = parse_date_time(date_time_str)
    if error_msg:
        await update.message.reply_text(error_msg, parse_mode='HTML')
        return ASK_DATE

    context.user_data['date_time'] = date_time_str
    context.user_data['parsed_datetime'] = dt  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—É—é –¥–∞—Ç—É

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
    if context.user_data.get('quick_mode'):
        # –í –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ –ø–æ—Å–ª–µ –¥–∞—Ç—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–º–ø
        context.user_data['quick_mode'] = False
        keyboard = [[p] for p in PACE_OPTIONS]
        await update.message.reply_text(
            '‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—ã!\n\n'
            '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É–Ω):',
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_PACE

    if context.user_data.get('edit_mode'):
        context.user_data['edit_mode'] = False
        return await preview_step(update, context)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    keyboard = []
    for route in ROUTE_COMMENTS:
        keyboard.append([f"üîó {route['name']}"])

    keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])

    await update.message.reply_text(
        '‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—ã!\n\n'
        '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ <b>–ø—É–±–ª–∏—á–Ω—É—é</b> —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot\n\n'
        '–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –≥–æ—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç:',
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return ASK_KOMOOT_LINK

async def ask_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã"""
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏: —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
    try:
        tz = pytz.timezone(TIMEZONE)
    except pytz.exceptions.UnknownTimeZoneError:
        tz = pytz.UTC
    now = datetime.now(tz)
    dates = []

    for i in range(3):
        date = now + timedelta(days=i)
        if i == 0:
            date_text = f"üìÖ –°–µ–≥–æ–¥–Ω—è ({date.strftime('%d.%m')})"
        elif i == 1:
            date_text = f"üìÖ –ó–∞–≤—Ç—Ä–∞ ({date.strftime('%d.%m')})"
        else:
            date_text = f"üìÖ –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ ({date.strftime('%d.%m')})"
        dates.append([date_text])

    dates.append(["‚ùå –û—Ç–º–µ–Ω–∞"])

    await update.message.reply_text(
        'üö¥‚Äç‚ôÇÔ∏è <b>–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞</b>\n\n'
        '‚Ä¢ –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ\n'
        '‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–î–î.–ú–ú</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>25.12</code>)',
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup(dates, one_time_keyboard=True, resize_keyboard=True)
    )
    return ASK_DATE

async def ask_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º
    times = [
        ["üåÖ 06:00"],
        ["üåÖ 06:30"],
        ["üåÖ 07:00"],
        ["üåÖ 07:30"],
        ["‚òÄÔ∏è 08:00"],
        ["‚òÄÔ∏è 08:30"],
        ["‚òÄÔ∏è 09:00"],
        ["‚òÄÔ∏è 09:30"],
        ["‚òÄÔ∏è 10:00"],
        ["‚òÄÔ∏è 10:30"],
        ["üåû 11:00"],
        ["üåû 11:30"],
        ["üåû 12:00"],
        ["üåÜ 18:00"],
        ["üåÜ 18:30"],
        ["üåÜ 19:00"],
        ["üåÜ 19:30"],
        ["üåô 20:00"],
        ["‚ùå –û—Ç–º–µ–Ω–∞"]
    ]

    await update.message.reply_text(
        'üö¥‚Äç‚ôÇÔ∏è <b>–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞</b>\n\n'
        '‚Ä¢ –í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ\n'
        '‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–ß–ß:–ú–ú</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>08:30</code>)',
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup(times, one_time_keyboard=True, resize_keyboard=True)
    )
    return ASK_TIME

async def handle_date_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã"""
    text = update.message.text.strip()

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "‚ùå –í—ã–±–æ—Ä –¥–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–Ω–æ–Ω—Å–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    try:
        tz = pytz.timezone(TIMEZONE)
    except pytz.exceptions.UnknownTimeZoneError:
        tz = pytz.UTC
    now = datetime.now(tz)
    selected_date = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú
    date_match = re.match(r'^(\d{1,2})\.(\d{1,2})$', text)
    if date_match:
        try:
            day, month = map(int, date_match.groups())
            # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É —Å —Ç–µ–∫—É—â–∏–º –≥–æ–¥–æ–º
            selected_date = datetime(now.year, month, day).date()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º (–µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –≥–æ–¥)
            if selected_date < now.date() and selected_date.year == now.year:
                await update.message.reply_text(
                    "‚ùå <b>–£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞!</b> –í—ã–±–µ—Ä–∏ –±—É–¥—É—â—É—é –¥–∞—Ç—É.",
                    parse_mode='HTML'
                )
                return ASK_DATE

        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12)",
                reply_markup=ReplyKeyboardRemove()
            )
            return ASK_DATE
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
        if "–°–µ–≥–æ–¥–Ω—è" in text:
            selected_date = now.date()
        elif "–ó–∞–≤—Ç—Ä–∞" in text:
            selected_date = (now + timedelta(days=1)).date()
        elif "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in text:
            selected_date = (now + timedelta(days=2)).date()
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞. –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú",
                reply_markup=ReplyKeyboardRemove()
            )
            return ASK_DATE

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    context.user_data['selected_date'] = selected_date

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
    return await ask_time(update, context)

async def handle_time_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    text = update.message.text.strip()

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "‚ùå –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–Ω–æ–Ω—Å–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
    time_match = re.match(r'^(\d{1,2}):(\d{2})$', text)
    selected_time = None

    if time_match:
        try:
            hour, minute = map(int, time_match.groups())
            if 0 <= hour <= 23 and 0 <= minute <= 59:
                selected_time = datetime.strptime(text, '%H:%M').time()
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 00 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 00 –¥–æ 59.",
                    reply_markup=ReplyKeyboardRemove()
                )
                return ASK_TIME
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:30)",
                reply_markup=ReplyKeyboardRemove()
            )
            return ASK_TIME
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º
        time_buttons = {
            "üåÖ 06:00": "06:00",
            "üåÖ 06:30": "06:30",
            "üåÖ 07:00": "07:00",
            "üåÖ 07:30": "07:30",
            "‚òÄÔ∏è 08:00": "08:00",
            "‚òÄÔ∏è 08:30": "08:30",
            "‚òÄÔ∏è 09:00": "09:00",
            "‚òÄÔ∏è 09:30": "09:30",
            "‚òÄÔ∏è 10:00": "10:00",
            "‚òÄÔ∏è 10:30": "10:30",
            "üåû 11:00": "11:00",
            "üåû 11:30": "11:30",
            "üåû 12:00": "12:00",
            "üåÜ 18:00": "18:00",
            "üåÜ 18:30": "18:30",
            "üåÜ 19:00": "19:00",
            "üåÜ 19:30": "19:30",
            "üåô 20:00": "20:00"
        }

        if text in time_buttons:
            selected_time_str = time_buttons[text]
            selected_time = datetime.strptime(selected_time_str, '%H:%M').time()
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",
                reply_markup=ReplyKeyboardRemove()
            )
            return ASK_TIME
    selected_date = context.user_data.get('selected_date')

    if not selected_date:
        await update.message.reply_text(
            "‚ùå –î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π datetime
    selected_datetime_naive = datetime.combine(selected_date, selected_time)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –∏ —Å–æ–∑–¥–∞–µ–º timezone-aware datetime
    try:
        tz = pytz.timezone(TIMEZONE)
    except pytz.exceptions.UnknownTimeZoneError:
        tz = pytz.UTC
    selected_datetime = tz.localize(selected_datetime_naive)

    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º)
    now = datetime.now(tz)
    if selected_datetime.date() < now.date():
        await update.message.reply_text(
            "‚ùå <b>–£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞!</b> –í—ã–±–µ—Ä–∏ –±—É–¥—É—â—É—é –¥–∞—Ç—É.",
            parse_mode='HTML'
        )
        return ASK_DATE
    elif selected_datetime.date() == now.date() and selected_datetime.time() <= now.time():
        await update.message.reply_text(
            "‚ùå <b>–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ!</b> –í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º.",
            parse_mode='HTML'
        )
        return ASK_TIME

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    date_time_str = selected_datetime.strftime('%d.%m %H:%M')
    context.user_data['date_time'] = date_time_str
    context.user_data['parsed_datetime'] = selected_datetime

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
    if context.user_data.get('quick_mode'):
        # –í –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ –ø–æ—Å–ª–µ –¥–∞—Ç—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–º–ø
        context.user_data['quick_mode'] = False
        keyboard = [[p] for p in PACE_OPTIONS]
        await update.message.reply_text(
            f'‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—ã: <b>{date_time_str}</b>\n\n'
            '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É–Ω):',
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_PACE

    if context.user_data.get('edit_mode'):
        context.user_data['edit_mode'] = False
        return await preview_step(update, context)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    keyboard = []
    for route in ROUTE_COMMENTS:
        keyboard.append([f"üîó {route['name']}"])

    keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])

    await update.message.reply_text(
        f'‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—ã: <b>{date_time_str}</b>\n\n'
        '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ <b>–ø—É–±–ª–∏—á–Ω—É—é</b> —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot\n\n'
        '–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –≥–æ—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç:',
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return ASK_KOMOOT_LINK

async def ask_komoot_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    logger.info(f"ask_komoot_link –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: '{text}'")
    logger.info(f"ROUTE_COMMENTS –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(ROUTE_COMMENTS)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –≥–æ—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞
    if text.startswith("üîó "):
        route_name = text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –≥–æ—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: '{route_name}'")
        # –ò—â–µ–º –º–∞—Ä—à—Ä—É—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        selected_route = None
        for route in ROUTE_COMMENTS:
            if route['name'] == route_name:
                selected_route = route
                break
        
        if selected_route:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É
            text = selected_route['link']
            logger.info(f"–ù–∞–π–¥–µ–Ω –º–∞—Ä—à—Ä—É—Ç: {selected_route['name']} -> {selected_route['link']}")
            await update.message.reply_text(
                f"‚úÖ –í—ã–±—Ä–∞–Ω –≥–æ—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç: <b>{selected_route['name']}</b>\n\n"
                f"–°—Å—ã–ª–∫–∞: {selected_route['link']}",
                parse_mode='HTML',
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            logger.warning(f"–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: '{route_name}'")
            await update.message.reply_text(
                "‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ASK_KOMOOT_LINK
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏")
        await update.message.reply_text(
            "‚ùå –í–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–Ω–æ–Ω—Å–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    match = KOMOOT_LINK_PATTERN.search(text)
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∏: {match}")
    
    if not match:
        # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é
        await update.message.reply_text(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot\n\n'
            '–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.'
        )
        return ASK_KOMOOT_LINK
    
    context.user_data['komoot_link'] = text
    context.user_data['tour_id'] = match.group(3)

    # –í—Å–µ–≥–¥–∞ —Å–∫–∞—á–∏–≤–∞–µ–º GPX –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if context.user_data.get('edit_mode'):
        # –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è GPX –≤–µ—Ä–Ω–µ–º—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
        context.user_data['edit_mode'] = False
        context.user_data['after_gpx_edit'] = True

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ GPX
    return await process_gpx(update, context)

async def process_gpx(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tour_id = context.user_data['tour_id']
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ GPX –¥–ª—è tour_id: {tour_id}")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π subprocess
        process = await asyncio.create_subprocess_exec(
            'komootgpx',
            '-d', tour_id,
            '-o', CACHE_DIR,
            '-e',
            '-n',
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å komootgpx –∑–∞–ø—É—â–µ–Ω —Å PID: {process.pid}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            stdout, stderr = await asyncio.wait_for(process.communicate(), timeout=60.0)
            logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å komootgpx –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: {process.returncode}")
        except asyncio.TimeoutError:
            # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–∏—Å, —É–±–∏–≤–∞–µ–º –µ–≥–æ
            logger.warning(f"–ü—Ä–æ—Ü–µ—Å—Å komootgpx –∑–∞–≤–∏—Å, —É–±–∏–≤–∞—é PID: {process.pid}")
            process.kill()
            await update.message.reply_text('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ GPX. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot:')
            return ASK_KOMOOT_LINK
            
        if process.returncode != 0:
            error_msg = stderr.decode() if stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            logger.error(f"–û—à–∏–±–∫–∞ komootgpx: {error_msg}")
            await update.message.reply_text(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ GPX: {error_msg}. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot:')
            return ASK_KOMOOT_LINK
            
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ GPX: {str(e)}", exc_info=True)
        await update.message.reply_text(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ GPX: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot:')
        return ASK_KOMOOT_LINK
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞—á–∞–ª—Å—è
    gpx_files = glob.glob(f"{CACHE_DIR}/*-{tour_id}.gpx")
    if not gpx_files:
        logger.warning(f"GPX —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è tour_id: {tour_id}")
        await update.message.reply_text('GPX-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot:')
        return ASK_KOMOOT_LINK
        
    gpx_path = gpx_files[0]
    logger.info(f"GPX —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {gpx_path}")
    context.user_data['gpx_path'] = gpx_path
    
    try:
        with open(gpx_path, 'r') as f:
            gpx = gpxpy.parse(f)
        length_km = gpx.length_2d() / 1000
        uphill = gpx.get_uphill_downhill()[0]
        context.user_data['length_km'] = round(length_km)
        context.user_data['uphill'] = round(uphill)
        logger.info(f"GPX –æ–±—Ä–∞–±–æ—Ç–∞–Ω: –¥–ª–∏–Ω–∞ {length_km} –∫–º, –Ω–∞–±–æ—Ä {uphill} –º")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ GPX
        extracted_name = extract_route_name_from_gpx(gpx_path)
        if extracted_name:
            context.user_data['extracted_name'] = extracted_name
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ GPX: {extracted_name}")
        else:
            context.user_data['extracted_name'] = None
            logger.info("–ù–∞–∑–≤–∞–Ω–∏–µ –≤ GPX —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GPX —Ñ–∞–π–ª–∞: {str(e)}", exc_info=True)
        await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GPX-—Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot:')
        return ASK_KOMOOT_LINK

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    extracted_name = context.user_data.get('extracted_name')

    if extracted_name:
        keyboard = [
            ["‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ"],
            ["‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ"],
            ["‚ùå –û—Ç–º–µ–Ω–∞"]
        ]
        message_text = (
            f'üö¥‚Äç‚ôÇÔ∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ GPX:</b> <code>{extracted_name}</code>\n\n'
            f'–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:'
        )
    else:
        keyboard = [
            ["‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ"],
            ["‚ùå –û—Ç–º–µ–Ω–∞"]
        ]
        message_text = '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –®–∞–π–∫–∞—à - –ß—É—Ä—É–≥ - –°—Ä–±–æ–±—Ä–∞–Ω - –¢–µ–º–µ—Ä–∏–Ω):'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è GPX
    if context.user_data.get('after_gpx_edit'):
        context.user_data['after_gpx_edit'] = False
        # –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è GPX –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
        return await preview_step(update, context)

    await update.message.reply_text(
        message_text,
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return ASK_ROUTE_NAME

async def ask_route_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "‚ùå –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω.\n\n–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–Ω–æ–Ω—Å–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–æ –ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    extracted_name = context.user_data.get('extracted_name')
    if extracted_name and text == "‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ":
        context.user_data['route_name'] = extracted_name
        await update.message.reply_text(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞: <b>{extracted_name}</b>",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove()
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è GPX
        if context.user_data.get('after_gpx_edit'):
            context.user_data['after_gpx_edit'] = False
            # –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è GPX –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
            return await preview_step(update, context)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞
        keyboard = [[p['name']] for p in START_POINTS]
        await update.message.reply_text(
            f"–ú–∞—Ä—à—Ä—É—Ç: {context.user_data['length_km']} –∫–º, –Ω–∞–±–æ—Ä: {context.user_data['uphill']} –º\n\n–í—ã–±–µ—Ä–∏ —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_START_POINT

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–æ –ª–∏ "–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ" –∏–ª–∏ "–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ"
    if text in ["‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ", "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ"]:
        if extracted_name:
            await update.message.reply_text(
                f'–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ GPX: <code>{extracted_name}</code>\n\n'
                f'–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞:',
                parse_mode='HTML',
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await update.message.reply_text(
                '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –®–∞–π–∫–∞—à - –ß—É—Ä—É–≥ - –°—Ä–±–æ–±—Ä–∞–Ω - –¢–µ–º–µ—Ä–∏–Ω):',
                reply_markup=ReplyKeyboardRemove()
            )
        return ASK_ROUTE_NAME

    # –û–±—ã—á–Ω—ã–π –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è
    context.user_data['route_name'] = text
    await update.message.reply_text(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞: <b>{text}</b>",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardRemove()
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è GPX
    if context.user_data.get('after_gpx_edit'):
        context.user_data['after_gpx_edit'] = False
        # –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è GPX –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
        return await preview_step(update, context)

    if context.user_data.get('edit_mode'):
        context.user_data['edit_mode'] = False
        return await preview_step(update, context)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞
    keyboard = [[p['name']] for p in START_POINTS]
    await update.message.reply_text(
        f"–ú–∞—Ä—à—Ä—É—Ç: {context.user_data['length_km']} –∫–º, –Ω–∞–±–æ—Ä: {context.user_data['uphill']} –º\n\n–í—ã–±–µ—Ä–∏ —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return ASK_START_POINT

async def ask_start_point(update: Update, context: ContextTypes.DEFAULT_TYPE):
    point_name = update.message.text.strip()
    point = next((p for p in START_POINTS if p['name'] == point_name), None)
    if not point:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.')
        return ASK_START_POINT
    if point['name'] == '–°–≤–æ—è —Ç–æ—á–∫–∞':
        context.user_data['start_point_name'] = None
        context.user_data['start_point_link'] = None
        await update.message.reply_text('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞:')
        return ASK_START_LINK
    else:
        context.user_data['start_point_name'] = point['name']
        context.user_data['start_point_link'] = point['link']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è GPX
        if context.user_data.get('after_gpx_edit'):
            context.user_data['after_gpx_edit'] = False
            # –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è GPX –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
            return await preview_step(update, context)

        if context.user_data.get('edit_mode'):
            context.user_data['edit_mode'] = False
            return await preview_step(update, context)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–æ—á–∫–∏ —Ñ–∏–Ω–∏—à–∞
        keyboard = [[p['name']] for p in FINISH_POINTS]
        keyboard.insert(0, ["üèÅ –ù–µ –Ω—É–∂–Ω–æ"])  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–ù–µ –Ω—É–∂–Ω–æ" –≤ –Ω–∞—á–∞–ª–æ
        await update.message.reply_text(
            f"–ú–∞—Ä—à—Ä—É—Ç: {context.user_data['length_km']} –∫–º, –Ω–∞–±–æ—Ä: {context.user_data['uphill']} –º\n\n"
            f"–£–∫–∞–∂–∏ —Ç–æ—á–∫—É —Ñ–∏–Ω–∏—à–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ 'üèÅ –ù–µ –Ω—É–∂–Ω–æ':",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_FINISH_POINT

async def ask_start_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∏–º–µ–Ω–∏, –∑–Ω–∞—á–∏—Ç —Å–µ–π—á–∞—Å –∂–¥—ë–º –∏–º—è, –∏–Ω–∞—á–µ –∂–¥—ë–º —Å—Å—ã–ª–∫—É
    if not context.user_data.get('start_point_name'):
        context.user_data['start_point_name'] = update.message.text.strip()
        await update.message.reply_text('–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps –¥–ª—è —Å–≤–æ–µ–π —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞:')
        return ASK_START_LINK
    else:
        link = update.message.text.strip()
        if not (link.startswith('http://') or link.startswith('https://')):
            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http...)')
            return ASK_START_LINK
        context.user_data['start_point_link'] = link

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è GPX
        if context.user_data.get('after_gpx_edit'):
            context.user_data['after_gpx_edit'] = False
            # –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è GPX –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
            return await preview_step(update, context)

        if context.user_data.get('edit_mode'):
            context.user_data['edit_mode'] = False
            return await preview_step(update, context)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–æ—á–∫–∏ —Ñ–∏–Ω–∏—à–∞
        keyboard = [[p['name']] for p in FINISH_POINTS]
        keyboard.insert(0, ["üèÅ –ù–µ –Ω—É–∂–Ω–æ"])  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–ù–µ –Ω—É–∂–Ω–æ" –≤ –Ω–∞—á–∞–ª–æ
        await update.message.reply_text(
            f"–ú–∞—Ä—à—Ä—É—Ç: {context.user_data['length_km']} –∫–º, –Ω–∞–±–æ—Ä: {context.user_data['uphill']} –º\n\n"
            f"–£–∫–∞–∂–∏ —Ç–æ—á–∫—É —Ñ–∏–Ω–∏—à–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ 'üèÅ –ù–µ –Ω—É–∂–Ω–æ':",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_FINISH_POINT

async def ask_finish_point(update: Update, context: ContextTypes.DEFAULT_TYPE):
    point_name = update.message.text.strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ü–∏–∏ "–ù–µ –Ω—É–∂–Ω–æ"
    if point_name == "üèÅ –ù–µ –Ω—É–∂–Ω–æ":
        context.user_data['finish_point_name'] = None
        context.user_data['finish_point_link'] = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if context.user_data.get('edit_mode'):
            context.user_data['edit_mode'] = False
            return await preview_step(update, context)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º–ø–∞
        keyboard = [[p] for p in PACE_OPTIONS]
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É–Ω):',
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_PACE

    # –ü–æ–∏—Å–∫ —Ç–æ—á–∫–∏ –≤ —Å–ø–∏—Å–∫–µ FINISH_POINTS
    point = next((p for p in FINISH_POINTS if p['name'] == point_name), None)
    if not point:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–æ—á–∫—É —Ñ–∏–Ω–∏—à–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.')
        return ASK_FINISH_POINT

    if point['name'] == '–°–≤–æ—è —Ç–æ—á–∫–∞':
        context.user_data['finish_point_name'] = None
        context.user_data['finish_point_link'] = None
        await update.message.reply_text('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π —Ç–æ—á–∫–∏ —Ñ–∏–Ω–∏—à–∞:')
        return ASK_FINISH_LINK
    else:
        context.user_data['finish_point_name'] = point['name']
        context.user_data['finish_point_link'] = point['link']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if context.user_data.get('edit_mode'):
            context.user_data['edit_mode'] = False
            return await preview_step(update, context)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º–ø–∞
        keyboard = [[p] for p in PACE_OPTIONS]
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É–Ω):',
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_PACE

async def ask_finish_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∏–º–µ–Ω–∏, –∑–Ω–∞—á–∏—Ç —Å–µ–π—á–∞—Å –∂–¥—ë–º –∏–º—è, –∏–Ω–∞—á–µ –∂–¥—ë–º —Å—Å—ã–ª–∫—É
    if not context.user_data.get('finish_point_name'):
        context.user_data['finish_point_name'] = update.message.text.strip()
        await update.message.reply_text('–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps –¥–ª—è —Å–≤–æ–µ–π —Ç–æ—á–∫–∏ —Ñ–∏–Ω–∏—à–∞:')
        return ASK_FINISH_LINK
    else:
        link = update.message.text.strip()
        if not (link.startswith('http://') or link.startswith('https://')):
            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http...)')
            return ASK_FINISH_LINK
        context.user_data['finish_point_link'] = link

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if context.user_data.get('edit_mode'):
            context.user_data['edit_mode'] = False
            return await preview_step(update, context)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º–ø–∞
        keyboard = [[p] for p in PACE_OPTIONS]
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É–Ω):',
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_PACE

async def ask_pace(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pace = update.message.text.strip()
    if pace not in PACE_OPTIONS:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–µ–º–ø –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
        return ASK_PACE
    context.user_data['pace'] = pace

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
    if context.user_data.get('quick_mode'):
        # –í –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ –ø–æ—Å–ª–µ —Ç–µ–º–ø–∞ —Å—Ä–∞–∑—É –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
        context.user_data['quick_mode'] = False
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∂–µ –µ—Å—Ç—å –∏–∑ –≥–æ—Ç–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        return await preview_step(update, context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è GPX
    if context.user_data.get('after_gpx_edit'):
        context.user_data['after_gpx_edit'] = False
        # –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è GPX –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
        return await preview_step(update, context)

    if context.user_data.get('edit_mode'):
        context.user_data['edit_mode'] = False
        return await preview_step(update, context)
    await update.message.reply_text(
        '–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–Ω–æ–Ω—Å—É (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫):',
        reply_markup=ReplyKeyboardRemove()
    )
    return ASK_COMMENT

async def ask_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text.strip()
    context.user_data['comment'] = comment

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è GPX
    if context.user_data.get('after_gpx_edit'):
        context.user_data['after_gpx_edit'] = False
        # –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è GPX –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
        return await preview_step(update, context)

    if context.user_data.get('edit_mode'):
        context.user_data['edit_mode'] = False
        return await preview_step(update, context)

    # –í –æ–±—ã—á–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø–æ—Å–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –¥–∞—à–±–æ—Ä–¥
    await update.message.reply_text(
        "üì∑ <b>–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∫ –∞–Ω–æ–Ω—Å—É?</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü—Ä–∏—Å–ª–∞—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
        "‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å <b>–¥–∞—à–±–æ—Ä–¥ –ø–æ–≥–æ–¥—ã</b> –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞\n"
        "‚Ä¢ –ò–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup([
            ["üå§Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –ø–æ–≥–æ–¥—ã (BETA)"],
            ["üì∑ –ü—Ä–∏—Å–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É"],
            ["‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"],
            ["‚ùå –û—Ç–º–µ–Ω–∞"]
        ], one_time_keyboard=True, resize_keyboard=True)
    )
    return ASK_IMAGE

async def ask_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –∞–Ω–æ–Ω—Å–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–æ –ª–∏ —Ñ–æ—Ç–æ
    if update.message.photo:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        context.user_data['announce_image'] = photo.file_id

        await update.message.reply_text(
            "‚úÖ <b>–ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –∞–Ω–æ–Ω—Å—É!</b>",
            parse_mode='HTML'
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è GPX
        if context.user_data.get('after_gpx_edit'):
            context.user_data['after_gpx_edit'] = False
            # –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
            return await preview_step(update, context)

        if context.user_data.get('edit_mode'):
            context.user_data['edit_mode'] = False
            return await preview_step(update, context)

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
        return await preview_step(update, context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    text = update.message.text.strip()

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–Ω–æ–Ω—Å–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

    if text == "üå§Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –ø–æ–≥–æ–¥—ã (BETA)":
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—à–±–æ—Ä–¥ –ø–æ–≥–æ–¥—ã
        gpx_path = context.user_data.get('gpx_path')
        parsed_datetime = context.user_data.get('parsed_datetime')

        if not gpx_path or not parsed_datetime:
            await update.message.reply_text(
                "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ –Ω–∞–π–¥–µ–Ω GPX —Ñ–∞–π–ª –∏–ª–∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞",
                parse_mode='HTML'
            )
            return await preview_step(update, context)

        await update.message.reply_text(
            "üå§Ô∏è <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–∞—à–±–æ—Ä–¥ –ø–æ–≥–æ–¥—ã...</b>\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã ‚è≥",
            parse_mode='HTML'
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—à–±–æ—Ä–¥
        dashboard_path = f"dashboard_{context.user_data.get('tour_id', 'temp')}.png"
        success = generate_weather_dashboard(gpx_path, parsed_datetime, dashboard_path)

        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –¥–∞—à–±–æ—Ä–¥—É
            context.user_data['dashboard_path'] = dashboard_path
            await update.message.reply_text(
                "‚úÖ <b>–î–∞—à–±–æ—Ä–¥ –ø–æ–≥–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                "–û–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –∞–Ω–æ–Ω—Å–µ –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏.",
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –ø–æ–≥–æ–¥—ã</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –∏–ª–∏ –¥–∞–Ω–Ω—ã–º–∏.\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –¥–∞—à–±–æ—Ä–¥–∞.",
                parse_mode='HTML'
            )

        return await preview_step(update, context)

    if text == "üì∑ –ü—Ä–∏—Å–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É":
        await update.message.reply_text(
            "üì∑ <b>–ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –∞–Ω–æ–Ω—Å–∞</b>\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup([
                ["‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"],
                ["‚ùå –û—Ç–º–µ–Ω–∞"]
            ], one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_IMAGE

    if text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É
        return await preview_step(update, context)

    if text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É":
        context.user_data['announce_image'] = None
        await update.message.reply_text(
            "‚úÖ <b>–ö–∞—Ä—Ç–∏–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞–Ω–æ–Ω—Å–∞!</b>",
            parse_mode='HTML'
        )

        if context.user_data.get('edit_mode'):
            context.user_data['edit_mode'] = False
            return await preview_step(update, context)
        return await preview_step(update, context)

    if text == "üì∑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É":
        await update.message.reply_text(
            "üì∑ <b>–ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –∞–Ω–æ–Ω—Å–∞</b>\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup([
                ["üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É"],
                ["‚ùå –û—Ç–º–µ–Ω–∞"]
            ], one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_IMAGE

    if text == "‚è≠Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –¥–∞—à–±–æ—Ä–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä—É, –æ—Å—Ç–∞–≤–ª—è—è –¥–∞—à–±–æ—Ä–¥
        return await preview_step(update, context)

    # –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if context.user_data.get('edit_mode'):
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
            reply_markup=ReplyKeyboardMarkup([
                ["üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É"],
                ["‚ùå –û—Ç–º–µ–Ω–∞"]
            ], one_time_keyboard=True, resize_keyboard=True)
        )
    elif context.user_data.get('dashboard_path'):
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞—à–±–æ—Ä–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
            reply_markup=ReplyKeyboardMarkup([
                ["‚è≠Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –¥–∞—à–±–æ—Ä–¥"],
                ["‚ùå –û—Ç–º–µ–Ω–∞"]
            ], one_time_keyboard=True, resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
            reply_markup=ReplyKeyboardMarkup([
                ["‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"],
                ["‚ùå –û—Ç–º–µ–Ω–∞"]
            ], one_time_keyboard=True, resize_keyboard=True)
        )
    return ASK_IMAGE

async def preview_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–æ–Ω—Å
    date_time_str = context.user_data.get('date_time', '-')
    dt, error_msg = parse_date_time(date_time_str)
    if dt:
        weekday = RU_WEEKDAYS[dt.weekday()]
        time_of_day = get_time_of_day(dt)
        date_part = dt.strftime('%d.%m')
        time_part = dt.strftime('%H:%M')
    else:
        weekday = '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏?'
        time_of_day = '–≤—Ä–µ–º—è —Å—É—Ç–æ–∫?'
        date_part = date_time_str
        time_part = ''
        if error_msg:
            await update.message.reply_text(error_msg, parse_mode='HTML')
            return ASK_DATE # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–ø—Ä–æ—Å—É –¥–∞—Ç—ã
    komoot_link = context.user_data.get('komoot_link', '-')
    route_name = context.user_data.get('route_name', '-')
    start_point_name = context.user_data.get('start_point_name', '-')
    start_point_link = context.user_data.get('start_point_link', '-')
    finish_point_name = context.user_data.get('finish_point_name')
    finish_point_link = context.user_data.get('finish_point_link')
    length_km = context.user_data.get('length_km', '-')
    uphill = context.user_data.get('uphill', '-')
    pace = context.user_data.get('pace', '-')
    comment = context.user_data.get('comment', '-')
    gpx_path = context.user_data.get('gpx_path', None)
    pace_emoji = pace.split(' ')[0] if pace else '-'
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–æ–Ω—Å–∞
    announce_lines = [
        f"<b>{weekday}, {date_part}, {time_of_day} ({time_part})</b>",
        f"–ú–∞—Ä—à—Ä—É—Ç: {route_name} ‚ÜîÔ∏è {length_km} –∫–º ‚õ∞ {uphill} –º (<a href=\"{komoot_link}\">–∫–æ–º—É—Ç</a>)",
        "",
        f"–°—Ç–∞—Ä—Ç: <a href=\"{start_point_link}\">{start_point_name}</a>, –≤—ã–µ–∑–¥ –≤ {time_part}"
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∏—à, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if finish_point_name and finish_point_link:
        announce_lines.append(f"–§–∏–Ω–∏—à: <a href=\"{finish_point_link}\">{finish_point_name}</a>")
    elif finish_point_name:
        announce_lines.append(f"–§–∏–Ω–∏—à: {finish_point_name}")

    announce_lines.extend([
        f"–û–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø: {pace_emoji}",
        "",
        comment,
        "",
        "–°—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –µ—Å–ª–∏ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–µ—Ö–∞—Ç—å"
    ])

    announce = "\n".join(announce_lines)
    # –ö–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    buttons = [["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"]]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏–ª–∏ –¥–∞—à–±–æ—Ä–¥–æ–º
    announce_image = context.user_data.get('announce_image')
    dashboard_path = context.user_data.get('dashboard_path')

    if announce_image:
        buttons.append(["üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É"])
    elif dashboard_path and os.path.exists(dashboard_path):
        buttons.append(["üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–∞—à–±–æ—Ä–¥"])
        buttons.append(["üì∑ –ó–∞–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π"])
    else:
        buttons.append(["üì∑ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É"])
        buttons.append(["üå§Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ (BETA)"])

    for step, name in STEP_TO_NAME.items():
        buttons.append([name])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏–ª–∏ –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–æ–Ω—Å–∞
    dashboard_path = context.user_data.get('dashboard_path')
    if announce_image:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å caption
        await update.message.reply_photo(
            photo=announce_image,
            caption=announce + '\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?',
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
        )
    elif dashboard_path and os.path.exists(dashboard_path):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥ –ø–æ–≥–æ–¥—ã –∫–∞–∫ –∫–∞—Ä—Ç–∏–Ω–∫—É
        await update.message.reply_photo(
            photo=open(dashboard_path, 'rb'),
            caption=announce + '\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?',
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            announce + '\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?',
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True),
            disable_web_page_preview=True
        )
    return PREVIEW_STEP

async def preview_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚Äî –ø—É–±–ª–∏–∫—É–µ–º –∞–Ω–æ–Ω—Å –∏ GPX
    if text == '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å':
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–æ–Ω—Å (—Ç–æ—Ç –∂–µ –∫–æ–¥, —á—Ç–æ –≤ preview_step)
        date_time_str = context.user_data.get('date_time', '-')
        dt, error_msg = parse_date_time(date_time_str)
        if dt:
            weekday = RU_WEEKDAYS[dt.weekday()]
            time_of_day = get_time_of_day(dt)
            date_part = dt.strftime('%d.%m')
            time_part = dt.strftime('%H:%M')
        else:
            weekday = '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏?'
            time_of_day = '–≤—Ä–µ–º—è —Å—É—Ç–æ–∫?'
            date_part = date_time_str
            time_part = ''
            if error_msg:
                await update.message.reply_text(error_msg, parse_mode='HTML')
                return ASK_DATE # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–ø—Ä–æ—Å—É –¥–∞—Ç—ã
        komoot_link = context.user_data.get('komoot_link', '-')
        route_name = context.user_data.get('route_name', '-')
        start_point_name = context.user_data.get('start_point_name', '-')
        start_point_link = context.user_data.get('start_point_link', '-')
        finish_point_name = context.user_data.get('finish_point_name')
        finish_point_link = context.user_data.get('finish_point_link')
        length_km = context.user_data.get('length_km', '-')
        uphill = context.user_data.get('uphill', '-')
        pace = context.user_data.get('pace', '-')
        comment = context.user_data.get('comment', '-')
        gpx_path = context.user_data.get('gpx_path', None)
        pace_emoji = pace.split(' ')[0] if pace else '-'

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–æ–Ω—Å–∞
        announce_lines = [
            f"<b>{weekday}, {date_part}, {time_of_day} ({time_part})</b>",
            f"–ú–∞—Ä—à—Ä—É—Ç: {route_name} ‚ÜîÔ∏è {length_km} –∫–º ‚õ∞ {uphill} –º (<a href=\"{komoot_link}\">–∫–æ–º—É—Ç</a>)",
            "",
            f"–°—Ç–∞—Ä—Ç: <a href=\"{start_point_link}\">{start_point_name}</a>, –≤—ã–µ–∑–¥ –≤ {time_part}"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∏—à, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        if finish_point_name and finish_point_link:
            announce_lines.append(f"–§–∏–Ω–∏—à: <a href=\"{finish_point_link}\">{finish_point_name}</a>")
        elif finish_point_name:
            announce_lines.append(f"–§–∏–Ω–∏—à: {finish_point_name}")

        announce_lines.extend([
            f"–û–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø: {pace_emoji}",
            "",
            comment,
            "",
            "–°—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –µ—Å–ª–∏ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–µ—Ö–∞—Ç—å"
        ])

        announce = "\n".join(announce_lines)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏–ª–∏ –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –∞–Ω–æ–Ω—Å–∞
        announce_image = context.user_data.get('announce_image')
        dashboard_path = context.user_data.get('dashboard_path')

        if announce_image:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å caption
            await update.message.reply_photo(
                photo=announce_image,
                caption=announce,
                parse_mode='HTML'
            )
        elif dashboard_path and os.path.exists(dashboard_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥ –ø–æ–≥–æ–¥—ã –∫–∞–∫ –∫–∞—Ä—Ç–∏–Ω–∫—É
            await update.message.reply_photo(
                photo=open(dashboard_path, 'rb'),
                caption=announce,
                parse_mode='HTML'
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(announce, parse_mode='HTML', disable_web_page_preview=True)
        if gpx_path:
            with open(gpx_path, 'rb') as f:
                await update.message.reply_document(f, filename=os.path.basename(gpx_path))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "‚úÖ <b>–ê–Ω–æ–Ω—Å —Å–æ–∑–¥–∞–Ω, –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –¥—Ä—É–∑—å—è–º.</b>\n\n"
            "üö¥‚Äç‚ôÇÔ∏è <b>–•–æ—Ä–æ—à–µ–π –ø–æ–∫–∞—Ç—É—à–∫–∏!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–Ω–æ–Ω—Å–∞.",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove()
        )
        
        return ConversationHandler.END

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –¥–∞—à–±–æ—Ä–¥–æ–º
    if text == "üì∑ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É":
        await update.message.reply_text(
            "üì∑ <b>–ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –∞–Ω–æ–Ω—Å–∞</b>\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup([
                ["üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É"],
                ["‚ùå –û—Ç–º–µ–Ω–∞"]
            ], one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_IMAGE

    if text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É":
        context.user_data['announce_image'] = None
        await update.message.reply_text(
            "‚úÖ <b>–ö–∞—Ä—Ç–∏–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∞–Ω–æ–Ω—Å–∞!</b>",
            parse_mode='HTML'
        )
        return await preview_step(update, context)

    if text == "üå§Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ (BETA)":
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—à–±–æ—Ä–¥ –ø–æ–≥–æ–¥—ã
        gpx_path = context.user_data.get('gpx_path')
        parsed_datetime = context.user_data.get('parsed_datetime')

        if not gpx_path or not parsed_datetime:
            await update.message.reply_text(
                "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ –Ω–∞–π–¥–µ–Ω GPX —Ñ–∞–π–ª –∏–ª–∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞",
                parse_mode='HTML'
            )
            return await preview_step(update, context)

        await update.message.reply_text(
            "üå§Ô∏è <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–∞—à–±–æ—Ä–¥ –ø–æ–≥–æ–¥—ã...</b>\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã ‚è≥",
            parse_mode='HTML'
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—à–±–æ—Ä–¥
        dashboard_path = f"dashboard_{context.user_data.get('tour_id', 'temp')}.png"
        success = generate_weather_dashboard(gpx_path, parsed_datetime, dashboard_path)

        if success:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –¥–∞—à–±–æ—Ä–¥—É
            context.user_data['dashboard_path'] = dashboard_path
            await update.message.reply_text(
                "‚úÖ <b>–î–∞—à–±–æ—Ä–¥ –ø–æ–≥–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                "–û–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –∞–Ω–æ–Ω—Å–µ –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏.",
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –ø–æ–≥–æ–¥—ã</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –∏–ª–∏ –¥–∞–Ω–Ω—ã–º–∏.\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –¥–∞—à–±–æ—Ä–¥–∞.",
                parse_mode='HTML'
            )

        return await preview_step(update, context)

    if text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–∞—à–±–æ—Ä–¥":
        dashboard_path = context.user_data.get('dashboard_path')
        if dashboard_path and os.path.exists(dashboard_path):
            try:
                os.remove(dashboard_path)
            except:
                pass
        context.user_data['dashboard_path'] = None
        await update.message.reply_text(
            "‚úÖ <b>–î–∞—à–±–æ—Ä–¥ —É–¥–∞–ª–µ–Ω –∏–∑ –∞–Ω–æ–Ω—Å–∞!</b>",
            parse_mode='HTML'
        )
        return await preview_step(update, context)

    if text == "üì∑ –ó–∞–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π":
        await update.message.reply_text(
            "üì∑ <b>–ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –∑–∞–º–µ–Ω—ã –¥–∞—à–±–æ—Ä–¥–∞</b>\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardMarkup([
                ["‚è≠Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –¥–∞—à–±–æ—Ä–¥"],
                ["‚ùå –û—Ç–º–µ–Ω–∞"]
            ], one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_IMAGE

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –Ω—É–∂–Ω—ã–π —ç—Ç–∞–ø
    for step, name in STEP_TO_NAME.items():
        if text == name:
            context.user_data['edit_mode'] = True
            if step == ASK_DATE:
                return await ask_date(update, context)
            elif step == ASK_TIME:
                return await ask_time(update, context)
            elif step == ASK_KOMOOT_LINK:
                # –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ Komoot - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º GPX –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ—Å–∏–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É
                context.user_data['gpx_path'] = None
                context.user_data['length_km'] = None
                context.user_data['uphill'] = None
                context.user_data['extracted_name'] = None
                keyboard = []
                for route in ROUTE_COMMENTS:
                    keyboard.append([f"üîó {route['name']}"])
                keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])
                await update.message.reply_text(
                    '–ü—Ä–∏—à–ª–∏ <b>–ø—É–±–ª–∏—á–Ω—É—é</b> —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç Komoot\n\n'
                    '–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –≥–æ—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç:',
                    parse_mode='HTML',
                    reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
                )
                return ASK_KOMOOT_LINK
            elif step == ASK_ROUTE_NAME:
                await update.message.reply_text('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞:', reply_markup=ReplyKeyboardRemove())
                return ASK_ROUTE_NAME
            elif step == ASK_START_POINT:
                keyboard = [[p['name']] for p in START_POINTS]
                await update.message.reply_text('–í—ã–±–µ—Ä–∏ —Ç–æ—á–∫—É —Å—Ç–∞—Ä—Ç–∞:', reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
                return ASK_START_POINT
            elif step == ASK_FINISH_POINT:
                keyboard = [[p['name']] for p in FINISH_POINTS]
                keyboard.insert(0, ["üèÅ –ù–µ –Ω—É–∂–Ω–æ"])  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–ù–µ –Ω—É–∂–Ω–æ" –≤ –Ω–∞—á–∞–ª–æ
                await update.message.reply_text(
                    f"–ú–∞—Ä—à—Ä—É—Ç: {context.user_data['length_km']} –∫–º, –Ω–∞–±–æ—Ä: {context.user_data['uphill']} –º\n\n"
                    f"–£–∫–∞–∂–∏ —Ç–æ—á–∫—É —Ñ–∏–Ω–∏—à–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ 'üèÅ –ù–µ –Ω—É–∂–Ω–æ':",
                    reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
                )
                return ASK_FINISH_POINT
            elif step == ASK_PACE:
                keyboard = [[p] for p in PACE_OPTIONS]
                await update.message.reply_text('–í—ã–±–µ—Ä–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–º–ø (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É–Ω):', reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
                return ASK_PACE
            elif step == ASK_COMMENT:
                await update.message.reply_text('–í–≤–µ–¥–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', reply_markup=ReplyKeyboardRemove())
                return ASK_COMMENT
            elif step == ASK_IMAGE:
                await update.message.reply_text(
                    "üì∑ <b>–ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –∞–Ω–æ–Ω—Å–∞</b>\n\n"
                    "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
                    parse_mode='HTML',
                    reply_markup=ReplyKeyboardMarkup([
                        ["üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É"],
                        ["‚ùå –û—Ç–º–µ–Ω–∞"]
                    ], one_time_keyboard=True, resize_keyboard=True)
                )
                return ASK_IMAGE
    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    return await preview_step(update, context)

async def restart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ"""
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    await update.message.reply_text(
        "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–Ω–æ–Ω—Å–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    cache_files = glob.glob(f"{CACHE_DIR}/*.gpx")
    cache_size = len(cache_files)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
    total_size = 0
    if cache_files:
        total_size = sum(os.path.getsize(f) for f in cache_files)
    
    status_text = f"ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
    status_text += f"üìÅ –§–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ: {cache_size}\n"
    status_text += f"üíæ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {total_size / 1024:.1f} KB\n"
    try:
        tz = pytz.timezone(TIMEZONE)
    except pytz.exceptions.UnknownTimeZoneError:
        tz = pytz.UTC
    now = datetime.now(tz)
    status_text += f"‚è∞ –í—Ä–µ–º—è ({TIMEZONE}): {now.strftime('%H:%M:%S')}\n"
    status_text += f"üìÖ –î–∞—Ç–∞ ({TIMEZONE}): {now.strftime('%d.%m.%Y')}\n"
    
    if cache_size > 10:
        status_text += "\n‚ö†Ô∏è –ú–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –∫—ç—à–µ! –ò—Å–ø–æ–ª—å–∑—É–π /clear_cache"
    elif cache_size == 0:
        status_text += "\n‚úÖ –ö—ç—à –ø—É—Å—Ç"
    else:
        status_text += f"\n‚úÖ –ö—ç—à –≤ –ø–æ—Ä—è–¥–∫–µ ({cache_size} —Ñ–∞–π–ª–æ–≤)"
    
    status_text += "\nüîÑ –ö—ç—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ 180 –¥–Ω–µ–π"
    
    await update.message.reply_text(status_text, parse_mode='HTML')

def cleanup_old_gpx_files():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç GPX —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 180 –¥–Ω–µ–π"""
    try:
        try:
            tz = pytz.timezone(TIMEZONE)
        except pytz.exceptions.UnknownTimeZoneError:
            tz = pytz.UTC
        current_time = datetime.now(tz)
        cache_files = glob.glob(f"{CACHE_DIR}/*.gpx")
        deleted_count = 0

        for file_path in cache_files:
            try:
                file_time = datetime.fromtimestamp(os.path.getmtime(file_path))
                # –°–æ–∑–¥–∞–µ–º timezone-aware datetime –¥–ª—è —Ñ–∞–π–ª–∞
                file_time_tz = tz.localize(file_time.replace(tzinfo=None))
                if (current_time - file_time_tz).days > 180:
                    os.remove(file_path)
                    logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {file_path}")
                    deleted_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")

        if deleted_count > 0:
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö GPX —Ñ–∞–π–ª–æ–≤")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ: {e}")

def cleanup_old_dashboards():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥—ã —Å—Ç–∞—Ä—à–µ 180 –¥–Ω–µ–π"""
    try:
        try:
            tz = pytz.timezone(TIMEZONE)
        except pytz.exceptions.UnknownTimeZoneError:
            tz = pytz.UTC
        current_time = datetime.now(tz)
        dashboard_files = glob.glob("dashboard_*.png")
        deleted_count = 0

        for file_path in dashboard_files:
            try:
                file_time = datetime.fromtimestamp(os.path.getmtime(file_path))
                # –°–æ–∑–¥–∞–µ–º timezone-aware datetime –¥–ª—è —Ñ–∞–π–ª–∞
                file_time_tz = tz.localize(file_time.replace(tzinfo=None))
                if (current_time - file_time_tz).days > 180:
                    os.remove(file_path)
                    logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –¥–∞—à–±–æ—Ä–¥: {file_path}")
                    deleted_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—à–±–æ—Ä–¥–∞ {file_path}: {e}")

        if deleted_count > 0:
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ –¥–∞—à–±–æ—Ä–¥–æ–≤: {e}")

async def preload_ready_routes():
    """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ –∫–µ—à"""
    logger.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≥–æ—Ç–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ –∫–µ—à...")
    
    for route in ROUTE_COMMENTS:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º tour_id –∏–∑ —Å—Å—ã–ª–∫–∏
            match = KOMOOT_LINK_PATTERN.search(route['link'])
            if not match:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å tour_id –∏–∑ —Å—Å—ã–ª–∫–∏: {route['link']}")
                continue
                
            tour_id = match.group(3)
            route_name = route['name']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–∞–π–ª –≤ –∫–µ—à–µ
            gpx_files = glob.glob(f"{CACHE_DIR}/*-{tour_id}.gpx")
            if gpx_files:
                logger.info(f"–ú–∞—Ä—à—Ä—É—Ç '{route_name}' —É–∂–µ –≤ –∫–µ—à–µ, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                continue
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ä—à—Ä—É—Ç '{route_name}' (tour_id: {tour_id})")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º GPX
            process = await asyncio.create_subprocess_exec(
                'komootgpx',
                '-d', tour_id,
                '-o', CACHE_DIR,
                '-e',
                '-n',
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            try:
                stdout, stderr = await asyncio.wait_for(process.communicate(), timeout=60.0)
                if process.returncode == 0:
                    logger.info(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç '{route_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–µ—à")
                else:
                    error_msg = stderr.decode() if stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞ '{route_name}': {error_msg}")
            except asyncio.TimeoutError:
                logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞ '{route_name}', —É–±–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å")
                process.kill()
                
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞ '{route.get('name', 'Unknown')}': {e}")
    
    logger.info("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def preload_ready_routes_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ç–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    logger.info("–ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –≥–æ—Ç–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ –∫–µ—à...")

    for route in ROUTE_COMMENTS:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º tour_id –∏–∑ —Å—Å—ã–ª–∫–∏
            match = KOMOOT_LINK_PATTERN.search(route['link'])
            if not match:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å tour_id –∏–∑ —Å—Å—ã–ª–∫–∏: {route['link']}")
                continue

            tour_id = match.group(3)
            route_name = route['name']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–∞–π–ª –≤ –∫–µ—à–µ
            gpx_files = glob.glob(f"{CACHE_DIR}/*-{tour_id}.gpx")
            if gpx_files:
                logger.info(f"–ú–∞—Ä—à—Ä—É—Ç '{route_name}' —É–∂–µ –≤ –∫–µ—à–µ, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                continue

            logger.info(f"–ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ä—à—Ä—É—Ç '{route_name}' (tour_id: {tour_id})")

            # –°–∫–∞—á–∏–≤–∞–µ–º GPX —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            import subprocess
            try:
                result = subprocess.run(
                    ['komootgpx', '-d', tour_id, '-o', CACHE_DIR, '-e', '-n'],
                    capture_output=True,
                    text=True,
                    timeout=60
                )

                if result.returncode == 0:
                    logger.info(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç '{route_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–µ—à")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞ '{route_name}': {result.stderr}")

            except subprocess.TimeoutExpired:
                logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞ '{route_name}'")
            except FileNotFoundError:
                logger.error(f"‚ùå komootgpx –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                break

        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞ '{route.get('name', 'Unknown')}': {e}")

    logger.info("–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–≥–æ–¥—ã

def generate_weather_dashboard(gpx_path, start_datetime, output_path="weather_dashboard.png", speed_kmh=27):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞—à–±–æ—Ä–¥ –ø–æ–≥–æ–¥—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π –º–æ–¥—É–ª—å"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –≤ –ø–∞–ø–∫–µ cache
        cache_output_path = os.path.join("cache", output_path)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –º–æ–¥—É–ª—è
        date_str = start_datetime.strftime('%d.%m.%Y')
        time_str = start_datetime.strftime('%H:%M')
        
        # –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –º–æ–¥—É–ª—å weather_dashboard.py
        cmd = [
            'python3', 'weather_dashboard.py',
            gpx_path,
            '-o', cache_output_path,
            '-s', str(speed_kmh),
            '-d', date_str,
            '-t', time_str
        ]
        
        print(f"üå§Ô∏è –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –º–æ–¥—É–ª—å: {' '.join(cmd)}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=os.getcwd())
        
        if result.returncode == 0:
            print(f"‚úÖ –î–∞—à–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {cache_output_path}")
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –∏–∑ cache –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            if os.path.exists(cache_output_path):
                import shutil
                shutil.copy2(cache_output_path, output_path)
                return True
            else:
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {cache_output_path}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –º–æ–¥—É–ª—è:")
            print(f"STDOUT: {result.stdout}")
            print(f"STDERR: {result.stderr}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –≤–Ω–µ—à–Ω–µ–≥–æ –º–æ–¥—É–ª—è: {e}")
        return False

async def clear_cache_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
        cleanup_old_gpx_files()
        
        cache_files = glob.glob(f"{CACHE_DIR}/*.gpx")
        deleted_count = 0
        
        for file_path in cache_files:
            try:
                os.remove(file_path)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –∫—ç—à–∞: {file_path}")
                deleted_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file_path}: {e}")
        
        if deleted_count == 0:
            await update.message.reply_text("üóëÔ∏è –ö—ç—à —É–∂–µ –ø—É—Å—Ç!")
        else:
            await update.message.reply_text(f"üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω! –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {str(e)}")

if __name__ == '__main__':
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
    try:
        tz = pytz.timezone(TIMEZONE)
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {TIMEZONE}")
        logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S %Z')}")
    except pytz.exceptions.UnknownTimeZoneError:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {TIMEZONE}, –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC")
        TIMEZONE = 'UTC'

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ GPX —Ñ–∞–π–ª—ã –∏ –¥–∞—à–±–æ—Ä–¥—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    cleanup_old_gpx_files()
    cleanup_old_dashboards()

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤ –∫–µ—à
    preload_ready_routes_sync()

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞ –∏ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
    app.add_handler(CommandHandler('status', status_command))
    app.add_handler(CommandHandler('clear_cache', clear_cache_command))
    app.add_handler(CommandHandler('help', help_command))


    
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CommandHandler('quick', quick_command)
        ],
        states={
            ASK_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_date_selection)],
            ASK_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_time_selection)],
            ASK_KOMOOT_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_komoot_link)],
            ASK_ROUTE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_route_name)],
            ASK_START_POINT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_start_point)],
            ASK_START_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_start_link)],
            ASK_FINISH_POINT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_finish_point)],
            ASK_FINISH_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_finish_link)],
            ASK_PACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_pace)],
            ASK_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_comment)],
            ASK_IMAGE: [MessageHandler((filters.TEXT | filters.PHOTO) & ~filters.COMMAND, ask_image)],
            PREVIEW_STEP: [MessageHandler(filters.TEXT & ~filters.COMMAND, preview_handler)],
            SELECT_ROUTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_route_selection)],
        },
        fallbacks=[CommandHandler('restart', restart_command)],
    )
    app.add_handler(conv_handler)
    print('Bot started...')
    app.run_polling() 